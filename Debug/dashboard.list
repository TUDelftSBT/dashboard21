
dashboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003afc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003cc0  08003cc0  00013cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cd8  08003cd8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003cd8  08003cd8  00013cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ce0  08003ce0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ce0  08003ce0  00013ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ce4  08003ce4  00013ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003ce8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  2000000c  08003cf4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08003cf4  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a925  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d6e  00000000  00000000  0002a961  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  0002c6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000878  00000000  00000000  0002d040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002162f  00000000  00000000  0002d8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b50a  00000000  00000000  0004eee7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb36f  00000000  00000000  0005a3f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00125760  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000257c  00000000  00000000  001257b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003ca8 	.word	0x08003ca8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003ca8 	.word	0x08003ca8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <Toggle_Green_LED>:
 *
 */

#include "main.h"

void Toggle_Green_LED(uint8_t ToggleNum){  // Turn on green led if 1 is given or off with 0
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, ToggleNum);
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	461a      	mov	r2, r3
 800050a:	2101      	movs	r1, #1
 800050c:	4803      	ldr	r0, [pc, #12]	; (800051c <Toggle_Green_LED+0x20>)
 800050e:	f002 fa75 	bl	80029fc <HAL_GPIO_WritePin>
}
 8000512:	bf00      	nop
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40020800 	.word	0x40020800

08000520 <Toggle_Yellow_LED>:

void Toggle_CB_TRIP_LED(uint8_t ToggleNum){  // Turn on CB led if 1 is given or off with 0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, ToggleNum);
}

void Toggle_Yellow_LED(uint8_t ToggleNum){  // Turn on yellow led if 1 is given or off with 0
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, ToggleNum);
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	461a      	mov	r2, r3
 800052e:	2102      	movs	r1, #2
 8000530:	4803      	ldr	r0, [pc, #12]	; (8000540 <Toggle_Yellow_LED+0x20>)
 8000532:	f002 fa63 	bl	80029fc <HAL_GPIO_WritePin>
}
 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40020800 	.word	0x40020800

08000544 <Toggle_Red_LED>:

void Toggle_Red_LED(uint8_t ToggleNum){  // Turn on red led if 1 is given or off with 0
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, ToggleNum);
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	461a      	mov	r2, r3
 8000552:	2104      	movs	r1, #4
 8000554:	4803      	ldr	r0, [pc, #12]	; (8000564 <Toggle_Red_LED+0x20>)
 8000556:	f002 fa51 	bl	80029fc <HAL_GPIO_WritePin>
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40020800 	.word	0x40020800

08000568 <Blink_Yellow_LED>:

void Blink_Yellow_LED(uint8_t delay){
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	71fb      	strb	r3, [r7, #7]
	Toggle_Yellow_LED(1);
 8000572:	2001      	movs	r0, #1
 8000574:	f7ff ffd4 	bl	8000520 <Toggle_Yellow_LED>
	HAL_Delay(delay);
 8000578:	79fb      	ldrb	r3, [r7, #7]
 800057a:	4618      	mov	r0, r3
 800057c:	f000 fe7e 	bl	800127c <HAL_Delay>
	Toggle_Yellow_LED(0);
 8000580:	2000      	movs	r0, #0
 8000582:	f7ff ffcd 	bl	8000520 <Toggle_Yellow_LED>
}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <ButtonHydrogen>:
 *      Author: Thomas Kamminga
 */
#include "main.h"

uint8_t ButtonHydrogen(void) // 1 if Hydrogen button selected 0 else
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8000594:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000598:	4802      	ldr	r0, [pc, #8]	; (80005a4 <ButtonHydrogen+0x14>)
 800059a:	f002 fa17 	bl	80029cc <HAL_GPIO_ReadPin>
 800059e:	4603      	mov	r3, r0
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40020400 	.word	0x40020400

080005a8 <ButtonBatteryRESET>:

uint8_t ButtonBatteryRESET(void) // 1 if BatteryRESET button selected 0 else
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7);
 80005ac:	2180      	movs	r1, #128	; 0x80
 80005ae:	4803      	ldr	r0, [pc, #12]	; (80005bc <ButtonBatteryRESET+0x14>)
 80005b0:	f002 fa0c 	bl	80029cc <HAL_GPIO_ReadPin>
 80005b4:	4603      	mov	r3, r0
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40020800 	.word	0x40020800

080005c0 <ButtonCB_TRIP>:

uint8_t ButtonCB_TRIP(void) // 1 if CB TRIP button selected 0 else
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80005c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c8:	4802      	ldr	r0, [pc, #8]	; (80005d4 <ButtonCB_TRIP+0x14>)
 80005ca:	f002 f9ff 	bl	80029cc <HAL_GPIO_ReadPin>
 80005ce:	4603      	mov	r3, r0
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40020800 	.word	0x40020800

080005d8 <ButtonChargeON>:

uint8_t ButtonChargeON(void) // 1 if battery charge button selected 0 else
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 80005dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005e0:	4802      	ldr	r0, [pc, #8]	; (80005ec <ButtonChargeON+0x14>)
 80005e2:	f002 f9f3 	bl	80029cc <HAL_GPIO_ReadPin>
 80005e6:	4603      	mov	r3, r0
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40020000 	.word	0x40020000

080005f0 <ButtonMotor>:

uint8_t ButtonMotor(void) // 1 if Bilge ON button selected 0 else
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 80005f4:	2120      	movs	r1, #32
 80005f6:	4803      	ldr	r0, [pc, #12]	; (8000604 <ButtonMotor+0x14>)
 80005f8:	f002 f9e8 	bl	80029cc <HAL_GPIO_ReadPin>
 80005fc:	4603      	mov	r3, r0
}
 80005fe:	4618      	mov	r0, r3
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40020000 	.word	0x40020000

08000608 <read_buttons>:

uint8_t read_buttons(void){
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
	uint8_t button_status = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	71fb      	strb	r3, [r7, #7]

	button_status += ButtonHydrogen();
 8000612:	f7ff ffbd 	bl	8000590 <ButtonHydrogen>
 8000616:	4603      	mov	r3, r0
 8000618:	461a      	mov	r2, r3
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	4413      	add	r3, r2
 800061e:	71fb      	strb	r3, [r7, #7]
	button_status = button_status <<1;
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	005b      	lsls	r3, r3, #1
 8000624:	71fb      	strb	r3, [r7, #7]

	button_status += ButtonBatteryRESET();
 8000626:	f7ff ffbf 	bl	80005a8 <ButtonBatteryRESET>
 800062a:	4603      	mov	r3, r0
 800062c:	461a      	mov	r2, r3
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	4413      	add	r3, r2
 8000632:	71fb      	strb	r3, [r7, #7]
	button_status = button_status <<1;
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	005b      	lsls	r3, r3, #1
 8000638:	71fb      	strb	r3, [r7, #7]

	button_status += ButtonCB_TRIP();
 800063a:	f7ff ffc1 	bl	80005c0 <ButtonCB_TRIP>
 800063e:	4603      	mov	r3, r0
 8000640:	461a      	mov	r2, r3
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	4413      	add	r3, r2
 8000646:	71fb      	strb	r3, [r7, #7]
	button_status = button_status <<1;
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	005b      	lsls	r3, r3, #1
 800064c:	71fb      	strb	r3, [r7, #7]

	button_status += ButtonChargeON();
 800064e:	f7ff ffc3 	bl	80005d8 <ButtonChargeON>
 8000652:	4603      	mov	r3, r0
 8000654:	461a      	mov	r2, r3
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	4413      	add	r3, r2
 800065a:	71fb      	strb	r3, [r7, #7]
	button_status = button_status <<1;
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	005b      	lsls	r3, r3, #1
 8000660:	71fb      	strb	r3, [r7, #7]

	button_status += ButtonMotor();
 8000662:	f7ff ffc5 	bl	80005f0 <ButtonMotor>
 8000666:	4603      	mov	r3, r0
 8000668:	461a      	mov	r2, r3
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	4413      	add	r3, r2
 800066e:	71fb      	strb	r3, [r7, #7]

	return button_status;
 8000670:	79fb      	ldrb	r3, [r7, #7]
}
 8000672:	4618      	mov	r0, r3
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
	...

0800067c <read_bulgepump_buttons>:

uint8_t read_bulgepump_buttons(void){
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0

	uint8_t button_status = 0;
 8000682:	2300      	movs	r3, #0
 8000684:	71fb      	strb	r3, [r7, #7]

	button_status += HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10); //Bilge port
 8000686:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800068a:	481f      	ldr	r0, [pc, #124]	; (8000708 <read_bulgepump_buttons+0x8c>)
 800068c:	f002 f99e 	bl	80029cc <HAL_GPIO_ReadPin>
 8000690:	4603      	mov	r3, r0
 8000692:	461a      	mov	r2, r3
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	4413      	add	r3, r2
 8000698:	71fb      	strb	r3, [r7, #7]
	button_status = button_status <<1;
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	005b      	lsls	r3, r3, #1
 800069e:	71fb      	strb	r3, [r7, #7]

	button_status += HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11); //Bilge motor
 80006a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006a4:	4818      	ldr	r0, [pc, #96]	; (8000708 <read_bulgepump_buttons+0x8c>)
 80006a6:	f002 f991 	bl	80029cc <HAL_GPIO_ReadPin>
 80006aa:	4603      	mov	r3, r0
 80006ac:	461a      	mov	r2, r3
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	4413      	add	r3, r2
 80006b2:	71fb      	strb	r3, [r7, #7]
	button_status = button_status <<1;
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	005b      	lsls	r3, r3, #1
 80006b8:	71fb      	strb	r3, [r7, #7]

	button_status += HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12); //Bilge crew
 80006ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006be:	4812      	ldr	r0, [pc, #72]	; (8000708 <read_bulgepump_buttons+0x8c>)
 80006c0:	f002 f984 	bl	80029cc <HAL_GPIO_ReadPin>
 80006c4:	4603      	mov	r3, r0
 80006c6:	461a      	mov	r2, r3
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	4413      	add	r3, r2
 80006cc:	71fb      	strb	r3, [r7, #7]
	button_status = button_status <<1;
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	005b      	lsls	r3, r3, #1
 80006d2:	71fb      	strb	r3, [r7, #7]

	button_status += HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2);  //Bilge battery
 80006d4:	2104      	movs	r1, #4
 80006d6:	480d      	ldr	r0, [pc, #52]	; (800070c <read_bulgepump_buttons+0x90>)
 80006d8:	f002 f978 	bl	80029cc <HAL_GPIO_ReadPin>
 80006dc:	4603      	mov	r3, r0
 80006de:	461a      	mov	r2, r3
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	4413      	add	r3, r2
 80006e4:	71fb      	strb	r3, [r7, #7]
	button_status = button_status <<1;
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	71fb      	strb	r3, [r7, #7]

	button_status += HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);  //Bilge starboard
 80006ec:	2108      	movs	r1, #8
 80006ee:	4808      	ldr	r0, [pc, #32]	; (8000710 <read_bulgepump_buttons+0x94>)
 80006f0:	f002 f96c 	bl	80029cc <HAL_GPIO_ReadPin>
 80006f4:	4603      	mov	r3, r0
 80006f6:	461a      	mov	r2, r3
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	4413      	add	r3, r2
 80006fc:	71fb      	strb	r3, [r7, #7]

	return  button_status;
 80006fe:	79fb      	ldrb	r3, [r7, #7]
}
 8000700:	4618      	mov	r0, r3
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40020800 	.word	0x40020800
 800070c:	40020c00 	.word	0x40020c00
 8000710:	40020400 	.word	0x40020400

08000714 <CheckSendMessage>:

CAN_TxHeaderTypeDef CAN1TxHeader;
CAN_RxHeaderTypeDef CAN1RxHeader;
uint8_t CAN1RxData[8];

uint8_t CheckSendMessage(uint8_t changedButtons){
 8000714:	b480      	push	{r7}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
	uint8_t SendOrNot = changedButtons || rr_can_send;
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d103      	bne.n	800072c <CheckSendMessage+0x18>
 8000724:	4b08      	ldr	r3, [pc, #32]	; (8000748 <CheckSendMessage+0x34>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <CheckSendMessage+0x1c>
 800072c:	2301      	movs	r3, #1
 800072e:	e000      	b.n	8000732 <CheckSendMessage+0x1e>
 8000730:	2300      	movs	r3, #0
 8000732:	73fb      	strb	r3, [r7, #15]
	rr_can_send = 0;
 8000734:	4b04      	ldr	r3, [pc, #16]	; (8000748 <CheckSendMessage+0x34>)
 8000736:	2200      	movs	r2, #0
 8000738:	701a      	strb	r2, [r3, #0]
	return SendOrNot;
 800073a:	7bfb      	ldrb	r3, [r7, #15]
}
 800073c:	4618      	mov	r0, r3
 800073e:	3714      	adds	r7, #20
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr
 8000748:	20000031 	.word	0x20000031

0800074c <CAN1ReceiveMsg>:

void CAN1ReceiveMsg(uint32_t count)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	if (CAN1RxHeader.StdId == can_msg_rx_hydrogenAlarm_id)	//if the message in the buffer is from the hydrogen alarm store it in the proper list
 8000754:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <CAN1ReceiveMsg+0x88>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800075c:	4293      	cmp	r3, r2
 800075e:	d126      	bne.n	80007ae <CAN1ReceiveMsg+0x62>
	{
		can_msg_rx_hydrogenAlarm_data[0] = CAN1RxData[0];
 8000760:	4b1d      	ldr	r3, [pc, #116]	; (80007d8 <CAN1ReceiveMsg+0x8c>)
 8000762:	781a      	ldrb	r2, [r3, #0]
 8000764:	4b1d      	ldr	r3, [pc, #116]	; (80007dc <CAN1ReceiveMsg+0x90>)
 8000766:	701a      	strb	r2, [r3, #0]
		can_msg_rx_hydrogenAlarm_data[1] = CAN1RxData[1];
 8000768:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <CAN1ReceiveMsg+0x8c>)
 800076a:	785a      	ldrb	r2, [r3, #1]
 800076c:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <CAN1ReceiveMsg+0x90>)
 800076e:	705a      	strb	r2, [r3, #1]
		can_msg_rx_hydrogenAlarm_data[2] = CAN1RxData[2];
 8000770:	4b19      	ldr	r3, [pc, #100]	; (80007d8 <CAN1ReceiveMsg+0x8c>)
 8000772:	789a      	ldrb	r2, [r3, #2]
 8000774:	4b19      	ldr	r3, [pc, #100]	; (80007dc <CAN1ReceiveMsg+0x90>)
 8000776:	709a      	strb	r2, [r3, #2]
		can_msg_rx_hydrogenAlarm_data[3] = CAN1RxData[3];
 8000778:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <CAN1ReceiveMsg+0x8c>)
 800077a:	78da      	ldrb	r2, [r3, #3]
 800077c:	4b17      	ldr	r3, [pc, #92]	; (80007dc <CAN1ReceiveMsg+0x90>)
 800077e:	70da      	strb	r2, [r3, #3]
		can_msg_rx_hydrogenAlarm_data[4] = CAN1RxData[4];
 8000780:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <CAN1ReceiveMsg+0x8c>)
 8000782:	791a      	ldrb	r2, [r3, #4]
 8000784:	4b15      	ldr	r3, [pc, #84]	; (80007dc <CAN1ReceiveMsg+0x90>)
 8000786:	711a      	strb	r2, [r3, #4]
		can_msg_rx_hydrogenAlarm_data[5] = CAN1RxData[5];
 8000788:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <CAN1ReceiveMsg+0x8c>)
 800078a:	795a      	ldrb	r2, [r3, #5]
 800078c:	4b13      	ldr	r3, [pc, #76]	; (80007dc <CAN1ReceiveMsg+0x90>)
 800078e:	715a      	strb	r2, [r3, #5]
		can_msg_rx_hydrogenAlarm_data[6] = CAN1RxData[6];
 8000790:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <CAN1ReceiveMsg+0x8c>)
 8000792:	799a      	ldrb	r2, [r3, #6]
 8000794:	4b11      	ldr	r3, [pc, #68]	; (80007dc <CAN1ReceiveMsg+0x90>)
 8000796:	719a      	strb	r2, [r3, #6]
		can_msg_rx_hydrogenAlarm_data[7] = CAN1RxData[7];
 8000798:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <CAN1ReceiveMsg+0x8c>)
 800079a:	79da      	ldrb	r2, [r3, #7]
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <CAN1ReceiveMsg+0x90>)
 800079e:	71da      	strb	r2, [r3, #7]

		HydrogenTimeLastMessage  = count;
 80007a0:	4a0f      	ldr	r2, [pc, #60]	; (80007e0 <CAN1ReceiveMsg+0x94>)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	6013      	str	r3, [r2, #0]
		rr_hydrogenAlarm_timeout = 0;
 80007a6:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <CAN1ReceiveMsg+0x98>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	701a      	strb	r2, [r3, #0]
	else if (CAN1RxHeader.StdId == can_msg_rx_WC_id) //if the message in the buffer is from the EMS store it in the proper list
	{
		can_msg_rx_WC_data[0] = CAN1RxData[0];
		rr_WC_handle = 1;
	}
}
 80007ac:	e00b      	b.n	80007c6 <CAN1ReceiveMsg+0x7a>
	else if (CAN1RxHeader.StdId == can_msg_rx_WC_id) //if the message in the buffer is from the EMS store it in the proper list
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <CAN1ReceiveMsg+0x88>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	22c8      	movs	r2, #200	; 0xc8
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d106      	bne.n	80007c6 <CAN1ReceiveMsg+0x7a>
		can_msg_rx_WC_data[0] = CAN1RxData[0];
 80007b8:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <CAN1ReceiveMsg+0x8c>)
 80007ba:	781a      	ldrb	r2, [r3, #0]
 80007bc:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <CAN1ReceiveMsg+0x9c>)
 80007be:	701a      	strb	r2, [r3, #0]
		rr_WC_handle = 1;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <CAN1ReceiveMsg+0xa0>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	701a      	strb	r2, [r3, #0]
}
 80007c6:	bf00      	nop
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	2000004c 	.word	0x2000004c
 80007d8:	20000038 	.word	0x20000038
 80007dc:	20000040 	.word	0x20000040
 80007e0:	2000002c 	.word	0x2000002c
 80007e4:	20000028 	.word	0x20000028
 80007e8:	20000048 	.word	0x20000048
 80007ec:	20000030 	.word	0x20000030

080007f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b088      	sub	sp, #32
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f6:	f000 fccf 	bl	8001198 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007fa:	f000 f88f 	bl	800091c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007fe:	f000 f9e7 	bl	8000bd0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000802:	f000 f8f7 	bl	80009f4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000806:	f000 f9b9 	bl	8000b7c <MX_USART1_UART_Init>
  MX_CAN1_Init();
 800080a:	f000 f945 	bl	8000a98 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  Toggle_Green_LED(1); //turn on green led
 800080e:	2001      	movs	r0, #1
 8000810:	f7ff fe74 	bl	80004fc <Toggle_Green_LED>

  CAN_TxHeaderTypeDef CAN1TxHeader;    // set up the transmission can message for the buttons
  CAN1TxHeader.ExtId = 0x01;
 8000814:	2301      	movs	r3, #1
 8000816:	60fb      	str	r3, [r7, #12]
  CAN1TxHeader.IDE = CAN_ID_STD;
 8000818:	2300      	movs	r3, #0
 800081a:	613b      	str	r3, [r7, #16]
  CAN1TxHeader.RTR = CAN_RTR_DATA;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
  CAN1TxHeader.TransmitGlobalTime = DISABLE;
 8000820:	2300      	movs	r3, #0
 8000822:	773b      	strb	r3, [r7, #28]
  CAN1TxHeader.StdId = can_msg_tx_dashboard_Buttons_id;
 8000824:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000828:	60bb      	str	r3, [r7, #8]
  CAN1TxHeader.DLC = 2;
 800082a:	2302      	movs	r3, #2
 800082c:	61bb      	str	r3, [r7, #24]

  uint8_t data[2];
  uint8_t button_status[2] = {read_buttons(), read_bulgepump_buttons()}; // TODO implement a function to read the bulgepump
 800082e:	f7ff feeb 	bl	8000608 <read_buttons>
 8000832:	4603      	mov	r3, r0
 8000834:	703b      	strb	r3, [r7, #0]
 8000836:	f7ff ff21 	bl	800067c <read_bulgepump_buttons>
 800083a:	4603      	mov	r3, r0
 800083c:	707b      	strb	r3, [r7, #1]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  button_status[0] = read_buttons();
 800083e:	f7ff fee3 	bl	8000608 <read_buttons>
 8000842:	4603      	mov	r3, r0
 8000844:	703b      	strb	r3, [r7, #0]
	  button_status[1] = read_bulgepump_buttons(); 			// read the buttons
 8000846:	f7ff ff19 	bl	800067c <read_bulgepump_buttons>
 800084a:	4603      	mov	r3, r0
 800084c:	707b      	strb	r3, [r7, #1]
	  if(CheckSendMessage(button_status[0] != data[0] || button_status[1] != data[1]))				// check if the button status has changed OR 200 milliseconds have passed
 800084e:	783a      	ldrb	r2, [r7, #0]
 8000850:	793b      	ldrb	r3, [r7, #4]
 8000852:	429a      	cmp	r2, r3
 8000854:	d103      	bne.n	800085e <main+0x6e>
 8000856:	787a      	ldrb	r2, [r7, #1]
 8000858:	797b      	ldrb	r3, [r7, #5]
 800085a:	429a      	cmp	r2, r3
 800085c:	d001      	beq.n	8000862 <main+0x72>
 800085e:	2301      	movs	r3, #1
 8000860:	e000      	b.n	8000864 <main+0x74>
 8000862:	2300      	movs	r3, #0
 8000864:	b2db      	uxtb	r3, r3
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff ff54 	bl	8000714 <CheckSendMessage>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d013      	beq.n	800089a <main+0xaa>
	  {
		  data[0] = button_status[0];			// load the new setting
 8000872:	783b      	ldrb	r3, [r7, #0]
 8000874:	713b      	strb	r3, [r7, #4]
		  data[1] =  button_status[1];
 8000876:	787b      	ldrb	r3, [r7, #1]
 8000878:	717b      	strb	r3, [r7, #5]
		  if(HAL_CAN_AddTxMessage(&hcan1, &CAN1TxHeader, data, (uint32_t *)CAN_TX_MAILBOX0) != HAL_OK) //transmit signal
 800087a:	1d3a      	adds	r2, r7, #4
 800087c:	f107 0108 	add.w	r1, r7, #8
 8000880:	2301      	movs	r3, #1
 8000882:	481f      	ldr	r0, [pc, #124]	; (8000900 <main+0x110>)
 8000884:	f001 f9b0 	bl	8001be8 <HAL_CAN_AddTxMessage>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d002      	beq.n	8000894 <main+0xa4>
		  {
			  Error_Handler();
 800088e:	f000 fa71 	bl	8000d74 <Error_Handler>
 8000892:	e002      	b.n	800089a <main+0xaa>
		  }
		  else
		  {
			  Blink_Yellow_LED(50); //blink if succes
 8000894:	2032      	movs	r0, #50	; 0x32
 8000896:	f7ff fe67 	bl	8000568 <Blink_Yellow_LED>
		  }
	  }

	   //read can messages these are generated in the HAL interrupt .c file

	  if((can_msg_rx_hydrogenAlarm_data[0] > 120) || (rr_hydrogenAlarm_timeout == 1))	// if the last bit of the can message is 1
 800089a:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <main+0x114>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	2b78      	cmp	r3, #120	; 0x78
 80008a0:	d803      	bhi.n	80008aa <main+0xba>
 80008a2:	4b19      	ldr	r3, [pc, #100]	; (8000908 <main+0x118>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d108      	bne.n	80008bc <main+0xcc>
		  {
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);	// turn on the speaker
 80008aa:	2201      	movs	r2, #1
 80008ac:	2101      	movs	r1, #1
 80008ae:	4817      	ldr	r0, [pc, #92]	; (800090c <main+0x11c>)
 80008b0:	f002 f8a4 	bl	80029fc <HAL_GPIO_WritePin>
			Toggle_Red_LED(1);
 80008b4:	2001      	movs	r0, #1
 80008b6:	f7ff fe45 	bl	8000544 <Toggle_Red_LED>
 80008ba:	e007      	b.n	80008cc <main+0xdc>
		  }
	  else
	  {
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0); // turn of the speaker
 80008bc:	2200      	movs	r2, #0
 80008be:	2101      	movs	r1, #1
 80008c0:	4812      	ldr	r0, [pc, #72]	; (800090c <main+0x11c>)
 80008c2:	f002 f89b 	bl	80029fc <HAL_GPIO_WritePin>
			  Toggle_Red_LED(0);
 80008c6:	2000      	movs	r0, #0
 80008c8:	f7ff fe3c 	bl	8000544 <Toggle_Red_LED>
	  }

	  if(rr_WC_handle == 1)
 80008cc:	4b10      	ldr	r3, [pc, #64]	; (8000910 <main+0x120>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d1b4      	bne.n	800083e <main+0x4e>
	  {
		  rr_WC_handle = 0;
 80008d4:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <main+0x120>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	701a      	strb	r2, [r3, #0]
		  if((can_msg_rx_WC_data[0] & 0b00000001) == 0b00000001) // if the last bit of the can message is 1
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <main+0x124>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d005      	beq.n	80008f2 <main+0x102>
		  {
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1); //turn the CB led on
 80008e6:	2201      	movs	r2, #1
 80008e8:	2108      	movs	r1, #8
 80008ea:	480b      	ldr	r0, [pc, #44]	; (8000918 <main+0x128>)
 80008ec:	f002 f886 	bl	80029fc <HAL_GPIO_WritePin>
 80008f0:	e7a5      	b.n	800083e <main+0x4e>
		  }
		  else{
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0); // turn the CB le off
 80008f2:	2200      	movs	r2, #0
 80008f4:	2108      	movs	r1, #8
 80008f6:	4808      	ldr	r0, [pc, #32]	; (8000918 <main+0x128>)
 80008f8:	f002 f880 	bl	80029fc <HAL_GPIO_WritePin>
	  button_status[0] = read_buttons();
 80008fc:	e79f      	b.n	800083e <main+0x4e>
 80008fe:	bf00      	nop
 8000900:	20000108 	.word	0x20000108
 8000904:	20000040 	.word	0x20000040
 8000908:	20000028 	.word	0x20000028
 800090c:	40020400 	.word	0x40020400
 8000910:	20000030 	.word	0x20000030
 8000914:	20000048 	.word	0x20000048
 8000918:	40020800 	.word	0x40020800

0800091c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b094      	sub	sp, #80	; 0x50
 8000920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	2234      	movs	r2, #52	; 0x34
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f003 f9b4 	bl	8003c98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000930:	f107 0308 	add.w	r3, r7, #8
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000940:	2300      	movs	r3, #0
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	4b29      	ldr	r3, [pc, #164]	; (80009ec <SystemClock_Config+0xd0>)
 8000946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000948:	4a28      	ldr	r2, [pc, #160]	; (80009ec <SystemClock_Config+0xd0>)
 800094a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094e:	6413      	str	r3, [r2, #64]	; 0x40
 8000950:	4b26      	ldr	r3, [pc, #152]	; (80009ec <SystemClock_Config+0xd0>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800095c:	2300      	movs	r3, #0
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	4b23      	ldr	r3, [pc, #140]	; (80009f0 <SystemClock_Config+0xd4>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a22      	ldr	r2, [pc, #136]	; (80009f0 <SystemClock_Config+0xd4>)
 8000966:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800096a:	6013      	str	r3, [r2, #0]
 800096c:	4b20      	ldr	r3, [pc, #128]	; (80009f0 <SystemClock_Config+0xd4>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000974:	603b      	str	r3, [r7, #0]
 8000976:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000978:	2301      	movs	r3, #1
 800097a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800097c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000980:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000982:	2302      	movs	r3, #2
 8000984:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000986:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800098a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800098c:	2304      	movs	r3, #4
 800098e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000990:	23a0      	movs	r3, #160	; 0xa0
 8000992:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000994:	2302      	movs	r3, #2
 8000996:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000998:	2302      	movs	r3, #2
 800099a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800099c:	2302      	movs	r3, #2
 800099e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4618      	mov	r0, r3
 80009a6:	f002 fb0f 	bl	8002fc8 <HAL_RCC_OscConfig>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009b0:	f000 f9e0 	bl	8000d74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b4:	230f      	movs	r3, #15
 80009b6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b8:	2302      	movs	r3, #2
 80009ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009bc:	2300      	movs	r3, #0
 80009be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ca:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009cc:	f107 0308 	add.w	r3, r7, #8
 80009d0:	2105      	movs	r1, #5
 80009d2:	4618      	mov	r0, r3
 80009d4:	f002 f82c 	bl	8002a30 <HAL_RCC_ClockConfig>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80009de:	f000 f9c9 	bl	8000d74 <Error_Handler>
  }
}
 80009e2:	bf00      	nop
 80009e4:	3750      	adds	r7, #80	; 0x50
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40007000 	.word	0x40007000

080009f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009fa:	463b      	mov	r3, r7
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a06:	4b21      	ldr	r3, [pc, #132]	; (8000a8c <MX_ADC1_Init+0x98>)
 8000a08:	4a21      	ldr	r2, [pc, #132]	; (8000a90 <MX_ADC1_Init+0x9c>)
 8000a0a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a0c:	4b1f      	ldr	r3, [pc, #124]	; (8000a8c <MX_ADC1_Init+0x98>)
 8000a0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a12:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a14:	4b1d      	ldr	r3, [pc, #116]	; (8000a8c <MX_ADC1_Init+0x98>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000a1a:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <MX_ADC1_Init+0x98>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a20:	4b1a      	ldr	r3, [pc, #104]	; (8000a8c <MX_ADC1_Init+0x98>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a26:	4b19      	ldr	r3, [pc, #100]	; (8000a8c <MX_ADC1_Init+0x98>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a2e:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <MX_ADC1_Init+0x98>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a34:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <MX_ADC1_Init+0x98>)
 8000a36:	4a17      	ldr	r2, [pc, #92]	; (8000a94 <MX_ADC1_Init+0xa0>)
 8000a38:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a3a:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <MX_ADC1_Init+0x98>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a40:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <MX_ADC1_Init+0x98>)
 8000a42:	2201      	movs	r2, #1
 8000a44:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a46:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <MX_ADC1_Init+0x98>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <MX_ADC1_Init+0x98>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a54:	480d      	ldr	r0, [pc, #52]	; (8000a8c <MX_ADC1_Init+0x98>)
 8000a56:	f000 fc35 	bl	80012c4 <HAL_ADC_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a60:	f000 f988 	bl	8000d74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000a64:	2309      	movs	r3, #9
 8000a66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a70:	463b      	mov	r3, r7
 8000a72:	4619      	mov	r1, r3
 8000a74:	4805      	ldr	r0, [pc, #20]	; (8000a8c <MX_ADC1_Init+0x98>)
 8000a76:	f000 fc69 	bl	800134c <HAL_ADC_ConfigChannel>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a80:	f000 f978 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a84:	bf00      	nop
 8000a86:	3710      	adds	r7, #16
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000080 	.word	0x20000080
 8000a90:	40012000 	.word	0x40012000
 8000a94:	0f000001 	.word	0x0f000001

08000a98 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	; 0x28
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a9e:	4b35      	ldr	r3, [pc, #212]	; (8000b74 <MX_CAN1_Init+0xdc>)
 8000aa0:	4a35      	ldr	r2, [pc, #212]	; (8000b78 <MX_CAN1_Init+0xe0>)
 8000aa2:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8000aa4:	4b33      	ldr	r3, [pc, #204]	; (8000b74 <MX_CAN1_Init+0xdc>)
 8000aa6:	2205      	movs	r2, #5
 8000aa8:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000aaa:	4b32      	ldr	r3, [pc, #200]	; (8000b74 <MX_CAN1_Init+0xdc>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ab0:	4b30      	ldr	r3, [pc, #192]	; (8000b74 <MX_CAN1_Init+0xdc>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000ab6:	4b2f      	ldr	r3, [pc, #188]	; (8000b74 <MX_CAN1_Init+0xdc>)
 8000ab8:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000abc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000abe:	4b2d      	ldr	r3, [pc, #180]	; (8000b74 <MX_CAN1_Init+0xdc>)
 8000ac0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000ac4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ac6:	4b2b      	ldr	r3, [pc, #172]	; (8000b74 <MX_CAN1_Init+0xdc>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000acc:	4b29      	ldr	r3, [pc, #164]	; (8000b74 <MX_CAN1_Init+0xdc>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8000ad2:	4b28      	ldr	r3, [pc, #160]	; (8000b74 <MX_CAN1_Init+0xdc>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000ad8:	4b26      	ldr	r3, [pc, #152]	; (8000b74 <MX_CAN1_Init+0xdc>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000ade:	4b25      	ldr	r3, [pc, #148]	; (8000b74 <MX_CAN1_Init+0xdc>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ae4:	4b23      	ldr	r3, [pc, #140]	; (8000b74 <MX_CAN1_Init+0xdc>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000aea:	4822      	ldr	r0, [pc, #136]	; (8000b74 <MX_CAN1_Init+0xdc>)
 8000aec:	f000 fe5c 	bl	80017a8 <HAL_CAN_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000af6:	f000 f93d 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
	// Configure the CAN filter to accept all messages (filter is necessary to get Rx to work)
	CAN_FilterTypeDef sFilterConfig;

	sFilterConfig.FilterBank = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000b02:	2301      	movs	r3, #1
 8000b04:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 8000b06:	2300      	movs	r3, #0
 8000b08:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8000b22:	463b      	mov	r3, r7
 8000b24:	4619      	mov	r1, r3
 8000b26:	4813      	ldr	r0, [pc, #76]	; (8000b74 <MX_CAN1_Init+0xdc>)
 8000b28:	f000 ff3a 	bl	80019a0 <HAL_CAN_ConfigFilter>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_CAN1_Init+0x9e>
		Error_Handler();
 8000b32:	f000 f91f 	bl	8000d74 <Error_Handler>
	}
	if (HAL_CAN_Start(&hcan1) != HAL_OK) // Start the CAN1 module
 8000b36:	480f      	ldr	r0, [pc, #60]	; (8000b74 <MX_CAN1_Init+0xdc>)
 8000b38:	f001 f812 	bl	8001b60 <HAL_CAN_Start>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_CAN1_Init+0xae>
			{
		Error_Handler();
 8000b42:	f000 f917 	bl	8000d74 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)
 8000b46:	2102      	movs	r1, #2
 8000b48:	480a      	ldr	r0, [pc, #40]	; (8000b74 <MX_CAN1_Init+0xdc>)
 8000b4a:	f001 fa3a 	bl	8001fc2 <HAL_CAN_ActivateNotification>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_CAN1_Init+0xc0>
			!= HAL_OK) // Activates CAN1 RX0 interrupt
		Error_Handler();
 8000b54:	f000 f90e 	bl	8000d74 <Error_Handler>

	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8000b58:	2101      	movs	r1, #1
 8000b5a:	4806      	ldr	r0, [pc, #24]	; (8000b74 <MX_CAN1_Init+0xdc>)
 8000b5c:	f001 fa31 	bl	8001fc2 <HAL_CAN_ActivateNotification>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_CAN1_Init+0xd2>
		Error_Handler();
 8000b66:	f000 f905 	bl	8000d74 <Error_Handler>
  /* USER CODE END CAN1_Init 2 */

}
 8000b6a:	bf00      	nop
 8000b6c:	3728      	adds	r7, #40	; 0x28
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000108 	.word	0x20000108
 8000b78:	40006400 	.word	0x40006400

08000b7c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <MX_USART1_UART_Init+0x4c>)
 8000b82:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <MX_USART1_UART_Init+0x50>)
 8000b84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <MX_USART1_UART_Init+0x4c>)
 8000b88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <MX_USART1_UART_Init+0x4c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <MX_USART1_UART_Init+0x4c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <MX_USART1_UART_Init+0x4c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <MX_USART1_UART_Init+0x4c>)
 8000ba2:	220c      	movs	r2, #12
 8000ba4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <MX_USART1_UART_Init+0x4c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <MX_USART1_UART_Init+0x4c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_USART1_UART_Init+0x4c>)
 8000bb4:	f002 fc62 	bl	800347c <HAL_UART_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bbe:	f000 f8d9 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	200000c8 	.word	0x200000c8
 8000bcc:	40011000 	.word	0x40011000

08000bd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	; 0x28
 8000bd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
 8000be2:	60da      	str	r2, [r3, #12]
 8000be4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]
 8000bea:	4b5d      	ldr	r3, [pc, #372]	; (8000d60 <MX_GPIO_Init+0x190>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a5c      	ldr	r2, [pc, #368]	; (8000d60 <MX_GPIO_Init+0x190>)
 8000bf0:	f043 0304 	orr.w	r3, r3, #4
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b5a      	ldr	r3, [pc, #360]	; (8000d60 <MX_GPIO_Init+0x190>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0304 	and.w	r3, r3, #4
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	4b56      	ldr	r3, [pc, #344]	; (8000d60 <MX_GPIO_Init+0x190>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a55      	ldr	r2, [pc, #340]	; (8000d60 <MX_GPIO_Init+0x190>)
 8000c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b53      	ldr	r3, [pc, #332]	; (8000d60 <MX_GPIO_Init+0x190>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	4b4f      	ldr	r3, [pc, #316]	; (8000d60 <MX_GPIO_Init+0x190>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a4e      	ldr	r2, [pc, #312]	; (8000d60 <MX_GPIO_Init+0x190>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b4c      	ldr	r3, [pc, #304]	; (8000d60 <MX_GPIO_Init+0x190>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	4b48      	ldr	r3, [pc, #288]	; (8000d60 <MX_GPIO_Init+0x190>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a47      	ldr	r2, [pc, #284]	; (8000d60 <MX_GPIO_Init+0x190>)
 8000c44:	f043 0302 	orr.w	r3, r3, #2
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b45      	ldr	r3, [pc, #276]	; (8000d60 <MX_GPIO_Init+0x190>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	603b      	str	r3, [r7, #0]
 8000c5a:	4b41      	ldr	r3, [pc, #260]	; (8000d60 <MX_GPIO_Init+0x190>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a40      	ldr	r2, [pc, #256]	; (8000d60 <MX_GPIO_Init+0x190>)
 8000c60:	f043 0308 	orr.w	r3, r3, #8
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b3e      	ldr	r3, [pc, #248]	; (8000d60 <MX_GPIO_Init+0x190>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0308 	and.w	r3, r3, #8
 8000c6e:	603b      	str	r3, [r7, #0]
 8000c70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15|led_system_Pin|led_error_Pin
 8000c72:	2200      	movs	r2, #0
 8000c74:	f24c 317f 	movw	r1, #50047	; 0xc37f
 8000c78:	483a      	ldr	r0, [pc, #232]	; (8000d64 <MX_GPIO_Init+0x194>)
 8000c7a:	f001 febf 	bl	80029fc <HAL_GPIO_WritePin>
                          |led_emerg_Pin|led_cb_trip_Pin|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f240 11df 	movw	r1, #479	; 0x1df
 8000c84:	4838      	ldr	r0, [pc, #224]	; (8000d68 <MX_GPIO_Init+0x198>)
 8000c86:	f001 feb9 	bl	80029fc <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, hydrogen_leak_Pin|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f24b 71c5 	movw	r1, #47045	; 0xb7c5
 8000c90:	4836      	ldr	r0, [pc, #216]	; (8000d6c <MX_GPIO_Init+0x19c>)
 8000c92:	f001 feb3 	bl	80029fc <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : temp_Pin cb_reset_Pin PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = temp_Pin|cb_reset_Pin|GPIO_PIN_10|GPIO_PIN_11
 8000c96:	f44f 5372 	mov.w	r3, #15488	; 0x3c80
 8000c9a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	4619      	mov	r1, r3
 8000caa:	482e      	ldr	r0, [pc, #184]	; (8000d64 <MX_GPIO_Init+0x194>)
 8000cac:	f001 fcfa 	bl	80026a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 led_system_Pin led_error_Pin
                           led_emerg_Pin led_cb_trip_Pin PC4 PC5
                           PC6 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|led_system_Pin|led_error_Pin
 8000cb0:	f24c 337f 	movw	r3, #50047	; 0xc37f
 8000cb4:	617b      	str	r3, [r7, #20]
                          |led_emerg_Pin|led_cb_trip_Pin|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4826      	ldr	r0, [pc, #152]	; (8000d64 <MX_GPIO_Init+0x194>)
 8000cca:	f001 fceb 	bl	80026a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000cce:	f240 13df 	movw	r3, #479	; 0x1df
 8000cd2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4820      	ldr	r0, [pc, #128]	; (8000d68 <MX_GPIO_Init+0x198>)
 8000ce8:	f001 fcdc 	bl	80026a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : motor_on_Pin bilge_on_Pin */
  GPIO_InitStruct.Pin = motor_on_Pin|bilge_on_Pin;
 8000cec:	f248 0320 	movw	r3, #32800	; 0x8020
 8000cf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4819      	ldr	r0, [pc, #100]	; (8000d68 <MX_GPIO_Init+0x198>)
 8000d02:	f001 fccf 	bl	80026a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : hydrogen_leak_Pin PB2 PB10 PB12
                           PB13 PB15 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = hydrogen_leak_Pin|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12
 8000d06:	f24b 73c5 	movw	r3, #47045	; 0xb7c5
 8000d0a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d14:	2300      	movs	r3, #0
 8000d16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4813      	ldr	r0, [pc, #76]	; (8000d6c <MX_GPIO_Init+0x19c>)
 8000d20:	f001 fcc0 	bl	80026a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : harbor_mode_Pin PB3 */
  GPIO_InitStruct.Pin = harbor_mode_Pin|GPIO_PIN_3;
 8000d24:	f244 0308 	movw	r3, #16392	; 0x4008
 8000d28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	4619      	mov	r1, r3
 8000d38:	480c      	ldr	r0, [pc, #48]	; (8000d6c <MX_GPIO_Init+0x19c>)
 8000d3a:	f001 fcb3 	bl	80026a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d3e:	2304      	movs	r3, #4
 8000d40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4807      	ldr	r0, [pc, #28]	; (8000d70 <MX_GPIO_Init+0x1a0>)
 8000d52:	f001 fca7 	bl	80026a4 <HAL_GPIO_Init>

}
 8000d56:	bf00      	nop
 8000d58:	3728      	adds	r7, #40	; 0x28
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40020800 	.word	0x40020800
 8000d68:	40020000 	.word	0x40020000
 8000d6c:	40020400 	.word	0x40020400
 8000d70:	40020c00 	.word	0x40020c00

08000d74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d78:	b672      	cpsid	i
}
 8000d7a:	bf00      	nop

  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  Toggle_Red_LED(1);
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	f7ff fbe1 	bl	8000544 <Toggle_Red_LED>
	  HAL_Delay(100);
 8000d82:	2064      	movs	r0, #100	; 0x64
 8000d84:	f000 fa7a 	bl	800127c <HAL_Delay>
	  Toggle_Red_LED(0);
 8000d88:	2000      	movs	r0, #0
 8000d8a:	f7ff fbdb 	bl	8000544 <Toggle_Red_LED>
	  Toggle_Red_LED(1);
 8000d8e:	e7f5      	b.n	8000d7c <Error_Handler+0x8>

08000d90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <HAL_MspInit+0x4c>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9e:	4a0f      	ldr	r2, [pc, #60]	; (8000ddc <HAL_MspInit+0x4c>)
 8000da0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da4:	6453      	str	r3, [r2, #68]	; 0x44
 8000da6:	4b0d      	ldr	r3, [pc, #52]	; (8000ddc <HAL_MspInit+0x4c>)
 8000da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	603b      	str	r3, [r7, #0]
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <HAL_MspInit+0x4c>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	4a08      	ldr	r2, [pc, #32]	; (8000ddc <HAL_MspInit+0x4c>)
 8000dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_MspInit+0x4c>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dca:	603b      	str	r3, [r7, #0]
 8000dcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	40023800 	.word	0x40023800

08000de0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	; 0x28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a17      	ldr	r2, [pc, #92]	; (8000e5c <HAL_ADC_MspInit+0x7c>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d127      	bne.n	8000e52 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <HAL_ADC_MspInit+0x80>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0a:	4a15      	ldr	r2, [pc, #84]	; (8000e60 <HAL_ADC_MspInit+0x80>)
 8000e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e10:	6453      	str	r3, [r2, #68]	; 0x44
 8000e12:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <HAL_ADC_MspInit+0x80>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <HAL_ADC_MspInit+0x80>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4a0e      	ldr	r2, [pc, #56]	; (8000e60 <HAL_ADC_MspInit+0x80>)
 8000e28:	f043 0302 	orr.w	r3, r3, #2
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <HAL_ADC_MspInit+0x80>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = pot_meter_Pin;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(pot_meter_GPIO_Port, &GPIO_InitStruct);
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4805      	ldr	r0, [pc, #20]	; (8000e64 <HAL_ADC_MspInit+0x84>)
 8000e4e:	f001 fc29 	bl	80026a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e52:	bf00      	nop
 8000e54:	3728      	adds	r7, #40	; 0x28
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40012000 	.word	0x40012000
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40020400 	.word	0x40020400

08000e68 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	; 0x28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a25      	ldr	r2, [pc, #148]	; (8000f1c <HAL_CAN_MspInit+0xb4>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d144      	bne.n	8000f14 <HAL_CAN_MspInit+0xac>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	4b24      	ldr	r3, [pc, #144]	; (8000f20 <HAL_CAN_MspInit+0xb8>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	4a23      	ldr	r2, [pc, #140]	; (8000f20 <HAL_CAN_MspInit+0xb8>)
 8000e94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e98:	6413      	str	r3, [r2, #64]	; 0x40
 8000e9a:	4b21      	ldr	r3, [pc, #132]	; (8000f20 <HAL_CAN_MspInit+0xb8>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <HAL_CAN_MspInit+0xb8>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a1c      	ldr	r2, [pc, #112]	; (8000f20 <HAL_CAN_MspInit+0xb8>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <HAL_CAN_MspInit+0xb8>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = can1rx_Pin|can2rx_Pin;
 8000ec2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ed4:	2309      	movs	r3, #9
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	4619      	mov	r1, r3
 8000ede:	4811      	ldr	r0, [pc, #68]	; (8000f24 <HAL_CAN_MspInit+0xbc>)
 8000ee0:	f001 fbe0 	bl	80026a4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	2013      	movs	r0, #19
 8000eea:	f001 fba4 	bl	8002636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000eee:	2013      	movs	r0, #19
 8000ef0:	f001 fbbd 	bl	800266e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	2014      	movs	r0, #20
 8000efa:	f001 fb9c 	bl	8002636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000efe:	2014      	movs	r0, #20
 8000f00:	f001 fbb5 	bl	800266e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2100      	movs	r1, #0
 8000f08:	2015      	movs	r0, #21
 8000f0a:	f001 fb94 	bl	8002636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000f0e:	2015      	movs	r0, #21
 8000f10:	f001 fbad 	bl	800266e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000f14:	bf00      	nop
 8000f16:	3728      	adds	r7, #40	; 0x28
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40006400 	.word	0x40006400
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40020000 	.word	0x40020000

08000f28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08a      	sub	sp, #40	; 0x28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a19      	ldr	r2, [pc, #100]	; (8000fac <HAL_UART_MspInit+0x84>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d12c      	bne.n	8000fa4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	613b      	str	r3, [r7, #16]
 8000f4e:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <HAL_UART_MspInit+0x88>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	4a17      	ldr	r2, [pc, #92]	; (8000fb0 <HAL_UART_MspInit+0x88>)
 8000f54:	f043 0310 	orr.w	r3, r3, #16
 8000f58:	6453      	str	r3, [r2, #68]	; 0x44
 8000f5a:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <HAL_UART_MspInit+0x88>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	f003 0310 	and.w	r3, r3, #16
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <HAL_UART_MspInit+0x88>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	4a10      	ldr	r2, [pc, #64]	; (8000fb0 <HAL_UART_MspInit+0x88>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6313      	str	r3, [r2, #48]	; 0x30
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <HAL_UART_MspInit+0x88>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f82:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f90:	2303      	movs	r3, #3
 8000f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f94:	2307      	movs	r3, #7
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <HAL_UART_MspInit+0x8c>)
 8000fa0:	f001 fb80 	bl	80026a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000fa4:	bf00      	nop
 8000fa6:	3728      	adds	r7, #40	; 0x28
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40011000 	.word	0x40011000
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40020000 	.word	0x40020000

08000fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <NMI_Handler+0x4>

08000fbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <HardFault_Handler+0x4>

08000fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <MemManage_Handler+0x4>

08000fca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <BusFault_Handler+0x4>

08000fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <UsageFault_Handler+0x4>

08000fd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


	if(count % 100 == 0){
 8001004:	4b27      	ldr	r3, [pc, #156]	; (80010a4 <SysTick_Handler+0xa4>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4b27      	ldr	r3, [pc, #156]	; (80010a8 <SysTick_Handler+0xa8>)
 800100a:	fb83 1302 	smull	r1, r3, r3, r2
 800100e:	1159      	asrs	r1, r3, #5
 8001010:	17d3      	asrs	r3, r2, #31
 8001012:	1acb      	subs	r3, r1, r3
 8001014:	2164      	movs	r1, #100	; 0x64
 8001016:	fb01 f303 	mul.w	r3, r1, r3
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	2b00      	cmp	r3, #0
 800101e:	d113      	bne.n	8001048 <SysTick_Handler+0x48>
		if((count != 100) && (count != 0) && ((count - HydrogenTimeLastMessage) > 600) ){ // if last transmission is less then 500 milliseconds panic (we muat not have that the count is 1 or 101 otherwise we most likely have integer overflow
 8001020:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <SysTick_Handler+0xa4>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b64      	cmp	r3, #100	; 0x64
 8001026:	d00f      	beq.n	8001048 <SysTick_Handler+0x48>
 8001028:	4b1e      	ldr	r3, [pc, #120]	; (80010a4 <SysTick_Handler+0xa4>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d00b      	beq.n	8001048 <SysTick_Handler+0x48>
 8001030:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <SysTick_Handler+0xa4>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	4b1d      	ldr	r3, [pc, #116]	; (80010ac <SysTick_Handler+0xac>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001040:	d902      	bls.n	8001048 <SysTick_Handler+0x48>
			rr_hydrogenAlarm_timeout = 1;
 8001042:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <SysTick_Handler+0xb0>)
 8001044:	2201      	movs	r2, #1
 8001046:	701a      	strb	r2, [r3, #0]
		}
	}

	if(count % 1000 == 0){ // every 1000 milliseconds
 8001048:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <SysTick_Handler+0xa4>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <SysTick_Handler+0xb4>)
 800104e:	fb83 1302 	smull	r1, r3, r3, r2
 8001052:	1199      	asrs	r1, r3, #6
 8001054:	17d3      	asrs	r3, r2, #31
 8001056:	1acb      	subs	r3, r1, r3
 8001058:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800105c:	fb01 f303 	mul.w	r3, r1, r3
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b00      	cmp	r3, #0
 8001064:	d10a      	bne.n	800107c <SysTick_Handler+0x7c>
		rr_can_send = 1; 	//read the flow sensor
 8001066:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <SysTick_Handler+0xb8>)
 8001068:	2201      	movs	r2, #1
 800106a:	701a      	strb	r2, [r3, #0]
		rr_hydrogenAlarm_timeout = 0;
 800106c:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <SysTick_Handler+0xb0>)
 800106e:	2200      	movs	r2, #0
 8001070:	701a      	strb	r2, [r3, #0]
		HydrogenTimeLastMessage = count;
 8001072:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <SysTick_Handler+0xa4>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	461a      	mov	r2, r3
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <SysTick_Handler+0xac>)
 800107a:	601a      	str	r2, [r3, #0]


	}

	if(count<20000){
 800107c:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <SysTick_Handler+0xa4>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001084:	4293      	cmp	r3, r2
 8001086:	dc05      	bgt.n	8001094 <SysTick_Handler+0x94>
		count++;
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <SysTick_Handler+0xa4>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	3301      	adds	r3, #1
 800108e:	4a05      	ldr	r2, [pc, #20]	; (80010a4 <SysTick_Handler+0xa4>)
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	e002      	b.n	800109a <SysTick_Handler+0x9a>
	}
	else{
		count = 0;
 8001094:	4b03      	ldr	r3, [pc, #12]	; (80010a4 <SysTick_Handler+0xa4>)
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800109a:	f000 f8cf 	bl	800123c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000034 	.word	0x20000034
 80010a8:	51eb851f 	.word	0x51eb851f
 80010ac:	2000002c 	.word	0x2000002c
 80010b0:	20000028 	.word	0x20000028
 80010b4:	10624dd3 	.word	0x10624dd3
 80010b8:	20000031 	.word	0x20000031

080010bc <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80010c0:	4802      	ldr	r0, [pc, #8]	; (80010cc <CAN1_TX_IRQHandler+0x10>)
 80010c2:	f000 ffa4 	bl	800200e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000108 	.word	0x20000108

080010d0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &CAN1RxHeader, CAN1RxData);
 80010d4:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <CAN1_RX0_IRQHandler+0x24>)
 80010d6:	4a08      	ldr	r2, [pc, #32]	; (80010f8 <CAN1_RX0_IRQHandler+0x28>)
 80010d8:	2100      	movs	r1, #0
 80010da:	4808      	ldr	r0, [pc, #32]	; (80010fc <CAN1_RX0_IRQHandler+0x2c>)
 80010dc:	f000 fe5f 	bl	8001d9e <HAL_CAN_GetRxMessage>
  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80010e0:	4806      	ldr	r0, [pc, #24]	; (80010fc <CAN1_RX0_IRQHandler+0x2c>)
 80010e2:	f000 ff94 	bl	800200e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  CAN1ReceiveMsg(count);
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <CAN1_RX0_IRQHandler+0x30>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fb2e 	bl	800074c <CAN1ReceiveMsg>
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000038 	.word	0x20000038
 80010f8:	2000004c 	.word	0x2000004c
 80010fc:	20000108 	.word	0x20000108
 8001100:	20000034 	.word	0x20000034

08001104 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001108:	4802      	ldr	r0, [pc, #8]	; (8001114 <CAN1_RX1_IRQHandler+0x10>)
 800110a:	f000 ff80 	bl	800200e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000108 	.word	0x20000108

08001118 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <SystemInit+0x28>)
 800111e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001122:	4a07      	ldr	r2, [pc, #28]	; (8001140 <SystemInit+0x28>)
 8001124:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001128:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800112c:	4b04      	ldr	r3, [pc, #16]	; (8001140 <SystemInit+0x28>)
 800112e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001132:	609a      	str	r2, [r3, #8]
#endif
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001144:	f8df d034 	ldr.w	sp, [pc, #52]	; 800117c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001148:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800114a:	e003      	b.n	8001154 <LoopCopyDataInit>

0800114c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800114c:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800114e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001150:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001152:	3104      	adds	r1, #4

08001154 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001154:	480b      	ldr	r0, [pc, #44]	; (8001184 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001156:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001158:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800115a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800115c:	d3f6      	bcc.n	800114c <CopyDataInit>
  ldr  r2, =_sbss
 800115e:	4a0b      	ldr	r2, [pc, #44]	; (800118c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001160:	e002      	b.n	8001168 <LoopFillZerobss>

08001162 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001162:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001164:	f842 3b04 	str.w	r3, [r2], #4

08001168 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001168:	4b09      	ldr	r3, [pc, #36]	; (8001190 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800116a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800116c:	d3f9      	bcc.n	8001162 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800116e:	f7ff ffd3 	bl	8001118 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001172:	f002 fd6d 	bl	8003c50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001176:	f7ff fb3b 	bl	80007f0 <main>
  bx  lr    
 800117a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800117c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001180:	08003ce8 	.word	0x08003ce8
  ldr  r0, =_sdata
 8001184:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001188:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800118c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001190:	20000134 	.word	0x20000134

08001194 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001194:	e7fe      	b.n	8001194 <ADC_IRQHandler>
	...

08001198 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800119c:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <HAL_Init+0x40>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a0d      	ldr	r2, [pc, #52]	; (80011d8 <HAL_Init+0x40>)
 80011a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011a8:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <HAL_Init+0x40>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a0a      	ldr	r2, [pc, #40]	; (80011d8 <HAL_Init+0x40>)
 80011ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011b4:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <HAL_Init+0x40>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a07      	ldr	r2, [pc, #28]	; (80011d8 <HAL_Init+0x40>)
 80011ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c0:	2003      	movs	r0, #3
 80011c2:	f001 fa2d 	bl	8002620 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011c6:	2000      	movs	r0, #0
 80011c8:	f000 f808 	bl	80011dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011cc:	f7ff fde0 	bl	8000d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40023c00 	.word	0x40023c00

080011dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <HAL_InitTick+0x54>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <HAL_InitTick+0x58>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	4619      	mov	r1, r3
 80011ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011fa:	4618      	mov	r0, r3
 80011fc:	f001 fa45 	bl	800268a <HAL_SYSTICK_Config>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e00e      	b.n	8001228 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b0f      	cmp	r3, #15
 800120e:	d80a      	bhi.n	8001226 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001210:	2200      	movs	r2, #0
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	f04f 30ff 	mov.w	r0, #4294967295
 8001218:	f001 fa0d 	bl	8002636 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800121c:	4a06      	ldr	r2, [pc, #24]	; (8001238 <HAL_InitTick+0x5c>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001222:	2300      	movs	r3, #0
 8001224:	e000      	b.n	8001228 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
}
 8001228:	4618      	mov	r0, r3
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000000 	.word	0x20000000
 8001234:	20000008 	.word	0x20000008
 8001238:	20000004 	.word	0x20000004

0800123c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <HAL_IncTick+0x20>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	461a      	mov	r2, r3
 8001246:	4b06      	ldr	r3, [pc, #24]	; (8001260 <HAL_IncTick+0x24>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4413      	add	r3, r2
 800124c:	4a04      	ldr	r2, [pc, #16]	; (8001260 <HAL_IncTick+0x24>)
 800124e:	6013      	str	r3, [r2, #0]
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000008 	.word	0x20000008
 8001260:	20000130 	.word	0x20000130

08001264 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return uwTick;
 8001268:	4b03      	ldr	r3, [pc, #12]	; (8001278 <HAL_GetTick+0x14>)
 800126a:	681b      	ldr	r3, [r3, #0]
}
 800126c:	4618      	mov	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	20000130 	.word	0x20000130

0800127c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001284:	f7ff ffee 	bl	8001264 <HAL_GetTick>
 8001288:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001294:	d005      	beq.n	80012a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001296:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <HAL_Delay+0x44>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	461a      	mov	r2, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4413      	add	r3, r2
 80012a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012a2:	bf00      	nop
 80012a4:	f7ff ffde 	bl	8001264 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	68fa      	ldr	r2, [r7, #12]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d8f7      	bhi.n	80012a4 <HAL_Delay+0x28>
  {
  }
}
 80012b4:	bf00      	nop
 80012b6:	bf00      	nop
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000008 	.word	0x20000008

080012c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012cc:	2300      	movs	r3, #0
 80012ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d101      	bne.n	80012da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e033      	b.n	8001342 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d109      	bne.n	80012f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff fd7c 	bl	8000de0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	f003 0310 	and.w	r3, r3, #16
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d118      	bne.n	8001334 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800130a:	f023 0302 	bic.w	r3, r3, #2
 800130e:	f043 0202 	orr.w	r2, r3, #2
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f000 f94a 	bl	80015b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	f023 0303 	bic.w	r3, r3, #3
 800132a:	f043 0201 	orr.w	r2, r3, #1
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	641a      	str	r2, [r3, #64]	; 0x40
 8001332:	e001      	b.n	8001338 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001340:	7bfb      	ldrb	r3, [r7, #15]
}
 8001342:	4618      	mov	r0, r3
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001356:	2300      	movs	r3, #0
 8001358:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001360:	2b01      	cmp	r3, #1
 8001362:	d101      	bne.n	8001368 <HAL_ADC_ConfigChannel+0x1c>
 8001364:	2302      	movs	r3, #2
 8001366:	e113      	b.n	8001590 <HAL_ADC_ConfigChannel+0x244>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2201      	movs	r2, #1
 800136c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b09      	cmp	r3, #9
 8001376:	d925      	bls.n	80013c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	68d9      	ldr	r1, [r3, #12]
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	b29b      	uxth	r3, r3
 8001384:	461a      	mov	r2, r3
 8001386:	4613      	mov	r3, r2
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	4413      	add	r3, r2
 800138c:	3b1e      	subs	r3, #30
 800138e:	2207      	movs	r2, #7
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43da      	mvns	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	400a      	ands	r2, r1
 800139c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	68d9      	ldr	r1, [r3, #12]
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	4618      	mov	r0, r3
 80013b0:	4603      	mov	r3, r0
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	4403      	add	r3, r0
 80013b6:	3b1e      	subs	r3, #30
 80013b8:	409a      	lsls	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	430a      	orrs	r2, r1
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	e022      	b.n	800140a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	6919      	ldr	r1, [r3, #16]
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	461a      	mov	r2, r3
 80013d2:	4613      	mov	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	4413      	add	r3, r2
 80013d8:	2207      	movs	r2, #7
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43da      	mvns	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	400a      	ands	r2, r1
 80013e6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6919      	ldr	r1, [r3, #16]
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	689a      	ldr	r2, [r3, #8]
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	4618      	mov	r0, r3
 80013fa:	4603      	mov	r3, r0
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	4403      	add	r3, r0
 8001400:	409a      	lsls	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	430a      	orrs	r2, r1
 8001408:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	2b06      	cmp	r3, #6
 8001410:	d824      	bhi.n	800145c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685a      	ldr	r2, [r3, #4]
 800141c:	4613      	mov	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	4413      	add	r3, r2
 8001422:	3b05      	subs	r3, #5
 8001424:	221f      	movs	r2, #31
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43da      	mvns	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	400a      	ands	r2, r1
 8001432:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	b29b      	uxth	r3, r3
 8001440:	4618      	mov	r0, r3
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685a      	ldr	r2, [r3, #4]
 8001446:	4613      	mov	r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	4413      	add	r3, r2
 800144c:	3b05      	subs	r3, #5
 800144e:	fa00 f203 	lsl.w	r2, r0, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	430a      	orrs	r2, r1
 8001458:	635a      	str	r2, [r3, #52]	; 0x34
 800145a:	e04c      	b.n	80014f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b0c      	cmp	r3, #12
 8001462:	d824      	bhi.n	80014ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685a      	ldr	r2, [r3, #4]
 800146e:	4613      	mov	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	3b23      	subs	r3, #35	; 0x23
 8001476:	221f      	movs	r2, #31
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43da      	mvns	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	400a      	ands	r2, r1
 8001484:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	b29b      	uxth	r3, r3
 8001492:	4618      	mov	r0, r3
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685a      	ldr	r2, [r3, #4]
 8001498:	4613      	mov	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	3b23      	subs	r3, #35	; 0x23
 80014a0:	fa00 f203 	lsl.w	r2, r0, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	430a      	orrs	r2, r1
 80014aa:	631a      	str	r2, [r3, #48]	; 0x30
 80014ac:	e023      	b.n	80014f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685a      	ldr	r2, [r3, #4]
 80014b8:	4613      	mov	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	3b41      	subs	r3, #65	; 0x41
 80014c0:	221f      	movs	r2, #31
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43da      	mvns	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	400a      	ands	r2, r1
 80014ce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	b29b      	uxth	r3, r3
 80014dc:	4618      	mov	r0, r3
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685a      	ldr	r2, [r3, #4]
 80014e2:	4613      	mov	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	4413      	add	r3, r2
 80014e8:	3b41      	subs	r3, #65	; 0x41
 80014ea:	fa00 f203 	lsl.w	r2, r0, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	430a      	orrs	r2, r1
 80014f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014f6:	4b29      	ldr	r3, [pc, #164]	; (800159c <HAL_ADC_ConfigChannel+0x250>)
 80014f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a28      	ldr	r2, [pc, #160]	; (80015a0 <HAL_ADC_ConfigChannel+0x254>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d10f      	bne.n	8001524 <HAL_ADC_ConfigChannel+0x1d8>
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b12      	cmp	r3, #18
 800150a:	d10b      	bne.n	8001524 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a1d      	ldr	r2, [pc, #116]	; (80015a0 <HAL_ADC_ConfigChannel+0x254>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d12b      	bne.n	8001586 <HAL_ADC_ConfigChannel+0x23a>
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a1c      	ldr	r2, [pc, #112]	; (80015a4 <HAL_ADC_ConfigChannel+0x258>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d003      	beq.n	8001540 <HAL_ADC_ConfigChannel+0x1f4>
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b11      	cmp	r3, #17
 800153e:	d122      	bne.n	8001586 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a11      	ldr	r2, [pc, #68]	; (80015a4 <HAL_ADC_ConfigChannel+0x258>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d111      	bne.n	8001586 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001562:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <HAL_ADC_ConfigChannel+0x25c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a11      	ldr	r2, [pc, #68]	; (80015ac <HAL_ADC_ConfigChannel+0x260>)
 8001568:	fba2 2303 	umull	r2, r3, r2, r3
 800156c:	0c9a      	lsrs	r2, r3, #18
 800156e:	4613      	mov	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001578:	e002      	b.n	8001580 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	3b01      	subs	r3, #1
 800157e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1f9      	bne.n	800157a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800158e:	2300      	movs	r3, #0
}
 8001590:	4618      	mov	r0, r3
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	40012300 	.word	0x40012300
 80015a0:	40012000 	.word	0x40012000
 80015a4:	10000012 	.word	0x10000012
 80015a8:	20000000 	.word	0x20000000
 80015ac:	431bde83 	.word	0x431bde83

080015b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015b8:	4b79      	ldr	r3, [pc, #484]	; (80017a0 <ADC_Init+0x1f0>)
 80015ba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	685a      	ldr	r2, [r3, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	431a      	orrs	r2, r3
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	685a      	ldr	r2, [r3, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	6859      	ldr	r1, [r3, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	021a      	lsls	r2, r3, #8
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	430a      	orrs	r2, r1
 80015f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001608:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6859      	ldr	r1, [r3, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	430a      	orrs	r2, r1
 800161a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	689a      	ldr	r2, [r3, #8]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800162a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6899      	ldr	r1, [r3, #8]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	68da      	ldr	r2, [r3, #12]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	430a      	orrs	r2, r1
 800163c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001642:	4a58      	ldr	r2, [pc, #352]	; (80017a4 <ADC_Init+0x1f4>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d022      	beq.n	800168e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001656:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6899      	ldr	r1, [r3, #8]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001678:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6899      	ldr	r1, [r3, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	430a      	orrs	r2, r1
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	e00f      	b.n	80016ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800169c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	689a      	ldr	r2, [r3, #8]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	689a      	ldr	r2, [r3, #8]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 0202 	bic.w	r2, r2, #2
 80016bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6899      	ldr	r1, [r3, #8]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	7e1b      	ldrb	r3, [r3, #24]
 80016c8:	005a      	lsls	r2, r3, #1
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	430a      	orrs	r2, r1
 80016d0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d01b      	beq.n	8001714 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	685a      	ldr	r2, [r3, #4]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016ea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	685a      	ldr	r2, [r3, #4]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80016fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6859      	ldr	r1, [r3, #4]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001706:	3b01      	subs	r3, #1
 8001708:	035a      	lsls	r2, r3, #13
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	430a      	orrs	r2, r1
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	e007      	b.n	8001724 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001722:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001732:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	3b01      	subs	r3, #1
 8001740:	051a      	lsls	r2, r3, #20
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	430a      	orrs	r2, r1
 8001748:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001758:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6899      	ldr	r1, [r3, #8]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001766:	025a      	lsls	r2, r3, #9
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	689a      	ldr	r2, [r3, #8]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800177e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6899      	ldr	r1, [r3, #8]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	029a      	lsls	r2, r3, #10
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	430a      	orrs	r2, r1
 8001792:	609a      	str	r2, [r3, #8]
}
 8001794:	bf00      	nop
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	40012300 	.word	0x40012300
 80017a4:	0f000001 	.word	0x0f000001

080017a8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e0ed      	b.n	8001996 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d102      	bne.n	80017cc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff fb4e 	bl	8000e68 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 0202 	bic.w	r2, r2, #2
 80017da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017dc:	f7ff fd42 	bl	8001264 <HAL_GetTick>
 80017e0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80017e2:	e012      	b.n	800180a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017e4:	f7ff fd3e 	bl	8001264 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b0a      	cmp	r3, #10
 80017f0:	d90b      	bls.n	800180a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2205      	movs	r2, #5
 8001802:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e0c5      	b.n	8001996 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1e5      	bne.n	80017e4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f042 0201 	orr.w	r2, r2, #1
 8001826:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001828:	f7ff fd1c 	bl	8001264 <HAL_GetTick>
 800182c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800182e:	e012      	b.n	8001856 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001830:	f7ff fd18 	bl	8001264 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b0a      	cmp	r3, #10
 800183c:	d90b      	bls.n	8001856 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001842:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2205      	movs	r2, #5
 800184e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e09f      	b.n	8001996 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	2b00      	cmp	r3, #0
 8001862:	d0e5      	beq.n	8001830 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	7e1b      	ldrb	r3, [r3, #24]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d108      	bne.n	800187e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	e007      	b.n	800188e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800188c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	7e5b      	ldrb	r3, [r3, #25]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d108      	bne.n	80018a8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	e007      	b.n	80018b8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	7e9b      	ldrb	r3, [r3, #26]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d108      	bne.n	80018d2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f042 0220 	orr.w	r2, r2, #32
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	e007      	b.n	80018e2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f022 0220 	bic.w	r2, r2, #32
 80018e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	7edb      	ldrb	r3, [r3, #27]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d108      	bne.n	80018fc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f022 0210 	bic.w	r2, r2, #16
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	e007      	b.n	800190c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 0210 	orr.w	r2, r2, #16
 800190a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	7f1b      	ldrb	r3, [r3, #28]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d108      	bne.n	8001926 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f042 0208 	orr.w	r2, r2, #8
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	e007      	b.n	8001936 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f022 0208 	bic.w	r2, r2, #8
 8001934:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	7f5b      	ldrb	r3, [r3, #29]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d108      	bne.n	8001950 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f042 0204 	orr.w	r2, r2, #4
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	e007      	b.n	8001960 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f022 0204 	bic.w	r2, r2, #4
 800195e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689a      	ldr	r2, [r3, #8]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	431a      	orrs	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	431a      	orrs	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	ea42 0103 	orr.w	r1, r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	1e5a      	subs	r2, r3, #1
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	430a      	orrs	r2, r1
 8001984:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
	...

080019a0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b087      	sub	sp, #28
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019b6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80019b8:	7cfb      	ldrb	r3, [r7, #19]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d003      	beq.n	80019c6 <HAL_CAN_ConfigFilter+0x26>
 80019be:	7cfb      	ldrb	r3, [r7, #19]
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	f040 80be 	bne.w	8001b42 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80019c6:	4b65      	ldr	r3, [pc, #404]	; (8001b5c <HAL_CAN_ConfigFilter+0x1bc>)
 80019c8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80019d0:	f043 0201 	orr.w	r2, r3, #1
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80019e0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f4:	021b      	lsls	r3, r3, #8
 80019f6:	431a      	orrs	r2, r3
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	f003 031f 	and.w	r3, r3, #31
 8001a06:	2201      	movs	r2, #1
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	43db      	mvns	r3, r3
 8001a18:	401a      	ands	r2, r3
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	69db      	ldr	r3, [r3, #28]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d123      	bne.n	8001a70 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	43db      	mvns	r3, r3
 8001a32:	401a      	ands	r2, r3
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a4a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	3248      	adds	r2, #72	; 0x48
 8001a50:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a64:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a66:	6979      	ldr	r1, [r7, #20]
 8001a68:	3348      	adds	r3, #72	; 0x48
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	440b      	add	r3, r1
 8001a6e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	69db      	ldr	r3, [r3, #28]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d122      	bne.n	8001abe <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	431a      	orrs	r2, r3
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a98:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	3248      	adds	r2, #72	; 0x48
 8001a9e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ab2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ab4:	6979      	ldr	r1, [r7, #20]
 8001ab6:	3348      	adds	r3, #72	; 0x48
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	440b      	add	r3, r1
 8001abc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d109      	bne.n	8001ada <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	401a      	ands	r2, r3
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001ad8:	e007      	b.n	8001aea <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d109      	bne.n	8001b06 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	43db      	mvns	r3, r3
 8001afc:	401a      	ands	r2, r3
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001b04:	e007      	b.n	8001b16 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	6a1b      	ldr	r3, [r3, #32]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d107      	bne.n	8001b2e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	431a      	orrs	r2, r3
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b34:	f023 0201 	bic.w	r2, r3, #1
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	e006      	b.n	8001b50 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b46:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
  }
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	371c      	adds	r7, #28
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	40006400 	.word	0x40006400

08001b60 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d12e      	bne.n	8001bd2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2202      	movs	r2, #2
 8001b78:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 0201 	bic.w	r2, r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b8c:	f7ff fb6a 	bl	8001264 <HAL_GetTick>
 8001b90:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b92:	e012      	b.n	8001bba <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b94:	f7ff fb66 	bl	8001264 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b0a      	cmp	r3, #10
 8001ba0:	d90b      	bls.n	8001bba <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2205      	movs	r2, #5
 8001bb2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e012      	b.n	8001be0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1e5      	bne.n	8001b94 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	e006      	b.n	8001be0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
  }
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b089      	sub	sp, #36	; 0x24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
 8001bf4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bfc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c06:	7ffb      	ldrb	r3, [r7, #31]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d003      	beq.n	8001c14 <HAL_CAN_AddTxMessage+0x2c>
 8001c0c:	7ffb      	ldrb	r3, [r7, #31]
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	f040 80b8 	bne.w	8001d84 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10a      	bne.n	8001c34 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d105      	bne.n	8001c34 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 80a0 	beq.w	8001d74 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	0e1b      	lsrs	r3, r3, #24
 8001c38:	f003 0303 	and.w	r3, r3, #3
 8001c3c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d907      	bls.n	8001c54 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c48:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e09e      	b.n	8001d92 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001c54:	2201      	movs	r2, #1
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	409a      	lsls	r2, r3
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d10d      	bne.n	8001c82 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001c70:	68f9      	ldr	r1, [r7, #12]
 8001c72:	6809      	ldr	r1, [r1, #0]
 8001c74:	431a      	orrs	r2, r3
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	3318      	adds	r3, #24
 8001c7a:	011b      	lsls	r3, r3, #4
 8001c7c:	440b      	add	r3, r1
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	e00f      	b.n	8001ca2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c8c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c92:	68f9      	ldr	r1, [r7, #12]
 8001c94:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001c96:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	3318      	adds	r3, #24
 8001c9c:	011b      	lsls	r3, r3, #4
 8001c9e:	440b      	add	r3, r1
 8001ca0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6819      	ldr	r1, [r3, #0]
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	691a      	ldr	r2, [r3, #16]
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	3318      	adds	r3, #24
 8001cae:	011b      	lsls	r3, r3, #4
 8001cb0:	440b      	add	r3, r1
 8001cb2:	3304      	adds	r3, #4
 8001cb4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	7d1b      	ldrb	r3, [r3, #20]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d111      	bne.n	8001ce2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	3318      	adds	r3, #24
 8001cc6:	011b      	lsls	r3, r3, #4
 8001cc8:	4413      	add	r3, r2
 8001cca:	3304      	adds	r3, #4
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	6811      	ldr	r1, [r2, #0]
 8001cd2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	3318      	adds	r3, #24
 8001cda:	011b      	lsls	r3, r3, #4
 8001cdc:	440b      	add	r3, r1
 8001cde:	3304      	adds	r3, #4
 8001ce0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	3307      	adds	r3, #7
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	061a      	lsls	r2, r3, #24
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	3306      	adds	r3, #6
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	041b      	lsls	r3, r3, #16
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3305      	adds	r3, #5
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	021b      	lsls	r3, r3, #8
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	3204      	adds	r2, #4
 8001d02:	7812      	ldrb	r2, [r2, #0]
 8001d04:	4610      	mov	r0, r2
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	6811      	ldr	r1, [r2, #0]
 8001d0a:	ea43 0200 	orr.w	r2, r3, r0
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	011b      	lsls	r3, r3, #4
 8001d12:	440b      	add	r3, r1
 8001d14:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001d18:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	3303      	adds	r3, #3
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	061a      	lsls	r2, r3, #24
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	3302      	adds	r3, #2
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	041b      	lsls	r3, r3, #16
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	021b      	lsls	r3, r3, #8
 8001d34:	4313      	orrs	r3, r2
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	7812      	ldrb	r2, [r2, #0]
 8001d3a:	4610      	mov	r0, r2
 8001d3c:	68fa      	ldr	r2, [r7, #12]
 8001d3e:	6811      	ldr	r1, [r2, #0]
 8001d40:	ea43 0200 	orr.w	r2, r3, r0
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	011b      	lsls	r3, r3, #4
 8001d48:	440b      	add	r3, r1
 8001d4a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001d4e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	3318      	adds	r3, #24
 8001d58:	011b      	lsls	r3, r3, #4
 8001d5a:	4413      	add	r3, r2
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	6811      	ldr	r1, [r2, #0]
 8001d62:	f043 0201 	orr.w	r2, r3, #1
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	3318      	adds	r3, #24
 8001d6a:	011b      	lsls	r3, r3, #4
 8001d6c:	440b      	add	r3, r1
 8001d6e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001d70:	2300      	movs	r3, #0
 8001d72:	e00e      	b.n	8001d92 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d78:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e006      	b.n	8001d92 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d88:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
  }
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3724      	adds	r7, #36	; 0x24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b087      	sub	sp, #28
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	60f8      	str	r0, [r7, #12]
 8001da6:	60b9      	str	r1, [r7, #8]
 8001da8:	607a      	str	r2, [r7, #4]
 8001daa:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001db2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001db4:	7dfb      	ldrb	r3, [r7, #23]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d003      	beq.n	8001dc2 <HAL_CAN_GetRxMessage+0x24>
 8001dba:	7dfb      	ldrb	r3, [r7, #23]
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	f040 80f3 	bne.w	8001fa8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d10e      	bne.n	8001de6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d116      	bne.n	8001e04 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dda:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e0e7      	b.n	8001fb6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	f003 0303 	and.w	r3, r3, #3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d107      	bne.n	8001e04 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e0d8      	b.n	8001fb6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	331b      	adds	r3, #27
 8001e0c:	011b      	lsls	r3, r3, #4
 8001e0e:	4413      	add	r3, r2
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0204 	and.w	r2, r3, #4
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d10c      	bne.n	8001e3c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	331b      	adds	r3, #27
 8001e2a:	011b      	lsls	r3, r3, #4
 8001e2c:	4413      	add	r3, r2
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	0d5b      	lsrs	r3, r3, #21
 8001e32:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	e00b      	b.n	8001e54 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	331b      	adds	r3, #27
 8001e44:	011b      	lsls	r3, r3, #4
 8001e46:	4413      	add	r3, r2
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	08db      	lsrs	r3, r3, #3
 8001e4c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	331b      	adds	r3, #27
 8001e5c:	011b      	lsls	r3, r3, #4
 8001e5e:	4413      	add	r3, r2
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0202 	and.w	r2, r3, #2
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	331b      	adds	r3, #27
 8001e72:	011b      	lsls	r3, r3, #4
 8001e74:	4413      	add	r3, r2
 8001e76:	3304      	adds	r3, #4
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 020f 	and.w	r2, r3, #15
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	331b      	adds	r3, #27
 8001e8a:	011b      	lsls	r3, r3, #4
 8001e8c:	4413      	add	r3, r2
 8001e8e:	3304      	adds	r3, #4
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	0a1b      	lsrs	r3, r3, #8
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	331b      	adds	r3, #27
 8001ea2:	011b      	lsls	r3, r3, #4
 8001ea4:	4413      	add	r3, r2
 8001ea6:	3304      	adds	r3, #4
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	0c1b      	lsrs	r3, r3, #16
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	011b      	lsls	r3, r3, #4
 8001eba:	4413      	add	r3, r2
 8001ebc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	011b      	lsls	r3, r3, #4
 8001ed0:	4413      	add	r3, r2
 8001ed2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	0a1a      	lsrs	r2, r3, #8
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	3301      	adds	r3, #1
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	011b      	lsls	r3, r3, #4
 8001eea:	4413      	add	r3, r2
 8001eec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	0c1a      	lsrs	r2, r3, #16
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	3302      	adds	r3, #2
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	011b      	lsls	r3, r3, #4
 8001f04:	4413      	add	r3, r2
 8001f06:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	0e1a      	lsrs	r2, r3, #24
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	3303      	adds	r3, #3
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	011b      	lsls	r3, r3, #4
 8001f1e:	4413      	add	r3, r2
 8001f20:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	3304      	adds	r3, #4
 8001f2a:	b2d2      	uxtb	r2, r2
 8001f2c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	011b      	lsls	r3, r3, #4
 8001f36:	4413      	add	r3, r2
 8001f38:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	0a1a      	lsrs	r2, r3, #8
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	3305      	adds	r3, #5
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	011b      	lsls	r3, r3, #4
 8001f50:	4413      	add	r3, r2
 8001f52:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	0c1a      	lsrs	r2, r3, #16
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	3306      	adds	r3, #6
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	011b      	lsls	r3, r3, #4
 8001f6a:	4413      	add	r3, r2
 8001f6c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	0e1a      	lsrs	r2, r3, #24
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	3307      	adds	r3, #7
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d108      	bne.n	8001f94 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68da      	ldr	r2, [r3, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f042 0220 	orr.w	r2, r2, #32
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	e007      	b.n	8001fa4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	691a      	ldr	r2, [r3, #16]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f042 0220 	orr.w	r2, r2, #32
 8001fa2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	e006      	b.n	8001fb6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
  }
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	371c      	adds	r7, #28
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b085      	sub	sp, #20
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fd2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001fd4:	7bfb      	ldrb	r3, [r7, #15]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d002      	beq.n	8001fe0 <HAL_CAN_ActivateNotification+0x1e>
 8001fda:	7bfb      	ldrb	r3, [r7, #15]
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d109      	bne.n	8001ff4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6959      	ldr	r1, [r3, #20]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	e006      	b.n	8002002 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
  }
}
 8002002:	4618      	mov	r0, r3
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b08a      	sub	sp, #40	; 0x28
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002016:	2300      	movs	r3, #0
 8002018:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	695b      	ldr	r3, [r3, #20]
 8002020:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800204a:	6a3b      	ldr	r3, [r7, #32]
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	2b00      	cmp	r3, #0
 8002052:	d07c      	beq.n	800214e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d023      	beq.n	80020a6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2201      	movs	r2, #1
 8002064:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 f983 	bl	800237c <HAL_CAN_TxMailbox0CompleteCallback>
 8002076:	e016      	b.n	80020a6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	f003 0304 	and.w	r3, r3, #4
 800207e:	2b00      	cmp	r3, #0
 8002080:	d004      	beq.n	800208c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
 800208a:	e00c      	b.n	80020a6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	f003 0308 	and.w	r3, r3, #8
 8002092:	2b00      	cmp	r3, #0
 8002094:	d004      	beq.n	80020a0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800209c:	627b      	str	r3, [r7, #36]	; 0x24
 800209e:	e002      	b.n	80020a6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 f989 	bl	80023b8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d024      	beq.n	80020fa <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020b8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 f963 	bl	8002390 <HAL_CAN_TxMailbox1CompleteCallback>
 80020ca:	e016      	b.n	80020fa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d004      	beq.n	80020e0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80020d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
 80020de:	e00c      	b.n	80020fa <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d004      	beq.n	80020f4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
 80020f2:	e002      	b.n	80020fa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 f969 	bl	80023cc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d024      	beq.n	800214e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800210c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 f943 	bl	80023a4 <HAL_CAN_TxMailbox2CompleteCallback>
 800211e:	e016      	b.n	800214e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d004      	beq.n	8002134 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
 8002132:	e00c      	b.n	800214e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d004      	beq.n	8002148 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002144:	627b      	str	r3, [r7, #36]	; 0x24
 8002146:	e002      	b.n	800214e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 f949 	bl	80023e0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800214e:	6a3b      	ldr	r3, [r7, #32]
 8002150:	f003 0308 	and.w	r3, r3, #8
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00c      	beq.n	8002172 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	f003 0310 	and.w	r3, r3, #16
 800215e:	2b00      	cmp	r3, #0
 8002160:	d007      	beq.n	8002172 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002168:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2210      	movs	r2, #16
 8002170:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002172:	6a3b      	ldr	r3, [r7, #32]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00b      	beq.n	8002194 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	f003 0308 	and.w	r3, r3, #8
 8002182:	2b00      	cmp	r3, #0
 8002184:	d006      	beq.n	8002194 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2208      	movs	r2, #8
 800218c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f93a 	bl	8002408 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002194:	6a3b      	ldr	r3, [r7, #32]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d009      	beq.n	80021b2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	f003 0303 	and.w	r3, r3, #3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d002      	beq.n	80021b2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 f921 	bl	80023f4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80021b2:	6a3b      	ldr	r3, [r7, #32]
 80021b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00c      	beq.n	80021d6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	f003 0310 	and.w	r3, r3, #16
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d007      	beq.n	80021d6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2210      	movs	r2, #16
 80021d4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80021d6:	6a3b      	ldr	r3, [r7, #32]
 80021d8:	f003 0320 	and.w	r3, r3, #32
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00b      	beq.n	80021f8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d006      	beq.n	80021f8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2208      	movs	r2, #8
 80021f0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f91c 	bl	8002430 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80021f8:	6a3b      	ldr	r3, [r7, #32]
 80021fa:	f003 0310 	and.w	r3, r3, #16
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d009      	beq.n	8002216 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	2b00      	cmp	r3, #0
 800220e:	d002      	beq.n	8002216 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 f903 	bl	800241c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002216:	6a3b      	ldr	r3, [r7, #32]
 8002218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00b      	beq.n	8002238 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	f003 0310 	and.w	r3, r3, #16
 8002226:	2b00      	cmp	r3, #0
 8002228:	d006      	beq.n	8002238 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2210      	movs	r2, #16
 8002230:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f906 	bl	8002444 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002238:	6a3b      	ldr	r3, [r7, #32]
 800223a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00b      	beq.n	800225a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	f003 0308 	and.w	r3, r3, #8
 8002248:	2b00      	cmp	r3, #0
 800224a:	d006      	beq.n	800225a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2208      	movs	r2, #8
 8002252:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 f8ff 	bl	8002458 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800225a:	6a3b      	ldr	r3, [r7, #32]
 800225c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d07b      	beq.n	800235c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	f003 0304 	and.w	r3, r3, #4
 800226a:	2b00      	cmp	r3, #0
 800226c:	d072      	beq.n	8002354 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002274:	2b00      	cmp	r3, #0
 8002276:	d008      	beq.n	800228a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800228a:	6a3b      	ldr	r3, [r7, #32]
 800228c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002290:	2b00      	cmp	r3, #0
 8002292:	d008      	beq.n	80022a6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	f043 0302 	orr.w	r3, r3, #2
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80022a6:	6a3b      	ldr	r3, [r7, #32]
 80022a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d008      	beq.n	80022c2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	f043 0304 	orr.w	r3, r3, #4
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80022c2:	6a3b      	ldr	r3, [r7, #32]
 80022c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d043      	beq.n	8002354 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d03e      	beq.n	8002354 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022dc:	2b60      	cmp	r3, #96	; 0x60
 80022de:	d02b      	beq.n	8002338 <HAL_CAN_IRQHandler+0x32a>
 80022e0:	2b60      	cmp	r3, #96	; 0x60
 80022e2:	d82e      	bhi.n	8002342 <HAL_CAN_IRQHandler+0x334>
 80022e4:	2b50      	cmp	r3, #80	; 0x50
 80022e6:	d022      	beq.n	800232e <HAL_CAN_IRQHandler+0x320>
 80022e8:	2b50      	cmp	r3, #80	; 0x50
 80022ea:	d82a      	bhi.n	8002342 <HAL_CAN_IRQHandler+0x334>
 80022ec:	2b40      	cmp	r3, #64	; 0x40
 80022ee:	d019      	beq.n	8002324 <HAL_CAN_IRQHandler+0x316>
 80022f0:	2b40      	cmp	r3, #64	; 0x40
 80022f2:	d826      	bhi.n	8002342 <HAL_CAN_IRQHandler+0x334>
 80022f4:	2b30      	cmp	r3, #48	; 0x30
 80022f6:	d010      	beq.n	800231a <HAL_CAN_IRQHandler+0x30c>
 80022f8:	2b30      	cmp	r3, #48	; 0x30
 80022fa:	d822      	bhi.n	8002342 <HAL_CAN_IRQHandler+0x334>
 80022fc:	2b10      	cmp	r3, #16
 80022fe:	d002      	beq.n	8002306 <HAL_CAN_IRQHandler+0x2f8>
 8002300:	2b20      	cmp	r3, #32
 8002302:	d005      	beq.n	8002310 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002304:	e01d      	b.n	8002342 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	f043 0308 	orr.w	r3, r3, #8
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800230e:	e019      	b.n	8002344 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	f043 0310 	orr.w	r3, r3, #16
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002318:	e014      	b.n	8002344 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	f043 0320 	orr.w	r3, r3, #32
 8002320:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002322:	e00f      	b.n	8002344 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800232a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800232c:	e00a      	b.n	8002344 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002336:	e005      	b.n	8002344 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800233e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002340:	e000      	b.n	8002344 <HAL_CAN_IRQHandler+0x336>
            break;
 8002342:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	699a      	ldr	r2, [r3, #24]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002352:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2204      	movs	r2, #4
 800235a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	2b00      	cmp	r3, #0
 8002360:	d008      	beq.n	8002374 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	431a      	orrs	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f87c 	bl	800246c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002374:	bf00      	nop
 8002376:	3728      	adds	r7, #40	; 0x28
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002490:	4b0c      	ldr	r3, [pc, #48]	; (80024c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800249c:	4013      	ands	r3, r2
 800249e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024b2:	4a04      	ldr	r2, [pc, #16]	; (80024c4 <__NVIC_SetPriorityGrouping+0x44>)
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	60d3      	str	r3, [r2, #12]
}
 80024b8:	bf00      	nop
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	e000ed00 	.word	0xe000ed00

080024c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024cc:	4b04      	ldr	r3, [pc, #16]	; (80024e0 <__NVIC_GetPriorityGrouping+0x18>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	0a1b      	lsrs	r3, r3, #8
 80024d2:	f003 0307 	and.w	r3, r3, #7
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	e000ed00 	.word	0xe000ed00

080024e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	db0b      	blt.n	800250e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024f6:	79fb      	ldrb	r3, [r7, #7]
 80024f8:	f003 021f 	and.w	r2, r3, #31
 80024fc:	4907      	ldr	r1, [pc, #28]	; (800251c <__NVIC_EnableIRQ+0x38>)
 80024fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002502:	095b      	lsrs	r3, r3, #5
 8002504:	2001      	movs	r0, #1
 8002506:	fa00 f202 	lsl.w	r2, r0, r2
 800250a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	e000e100 	.word	0xe000e100

08002520 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	6039      	str	r1, [r7, #0]
 800252a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800252c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002530:	2b00      	cmp	r3, #0
 8002532:	db0a      	blt.n	800254a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	b2da      	uxtb	r2, r3
 8002538:	490c      	ldr	r1, [pc, #48]	; (800256c <__NVIC_SetPriority+0x4c>)
 800253a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253e:	0112      	lsls	r2, r2, #4
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	440b      	add	r3, r1
 8002544:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002548:	e00a      	b.n	8002560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	b2da      	uxtb	r2, r3
 800254e:	4908      	ldr	r1, [pc, #32]	; (8002570 <__NVIC_SetPriority+0x50>)
 8002550:	79fb      	ldrb	r3, [r7, #7]
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	3b04      	subs	r3, #4
 8002558:	0112      	lsls	r2, r2, #4
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	440b      	add	r3, r1
 800255e:	761a      	strb	r2, [r3, #24]
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	e000e100 	.word	0xe000e100
 8002570:	e000ed00 	.word	0xe000ed00

08002574 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002574:	b480      	push	{r7}
 8002576:	b089      	sub	sp, #36	; 0x24
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f1c3 0307 	rsb	r3, r3, #7
 800258e:	2b04      	cmp	r3, #4
 8002590:	bf28      	it	cs
 8002592:	2304      	movcs	r3, #4
 8002594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	3304      	adds	r3, #4
 800259a:	2b06      	cmp	r3, #6
 800259c:	d902      	bls.n	80025a4 <NVIC_EncodePriority+0x30>
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	3b03      	subs	r3, #3
 80025a2:	e000      	b.n	80025a6 <NVIC_EncodePriority+0x32>
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a8:	f04f 32ff 	mov.w	r2, #4294967295
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43da      	mvns	r2, r3
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	401a      	ands	r2, r3
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025bc:	f04f 31ff 	mov.w	r1, #4294967295
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	fa01 f303 	lsl.w	r3, r1, r3
 80025c6:	43d9      	mvns	r1, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025cc:	4313      	orrs	r3, r2
         );
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3724      	adds	r7, #36	; 0x24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
	...

080025dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3b01      	subs	r3, #1
 80025e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025ec:	d301      	bcc.n	80025f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ee:	2301      	movs	r3, #1
 80025f0:	e00f      	b.n	8002612 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025f2:	4a0a      	ldr	r2, [pc, #40]	; (800261c <SysTick_Config+0x40>)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3b01      	subs	r3, #1
 80025f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025fa:	210f      	movs	r1, #15
 80025fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002600:	f7ff ff8e 	bl	8002520 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002604:	4b05      	ldr	r3, [pc, #20]	; (800261c <SysTick_Config+0x40>)
 8002606:	2200      	movs	r2, #0
 8002608:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800260a:	4b04      	ldr	r3, [pc, #16]	; (800261c <SysTick_Config+0x40>)
 800260c:	2207      	movs	r2, #7
 800260e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	e000e010 	.word	0xe000e010

08002620 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f7ff ff29 	bl	8002480 <__NVIC_SetPriorityGrouping>
}
 800262e:	bf00      	nop
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002636:	b580      	push	{r7, lr}
 8002638:	b086      	sub	sp, #24
 800263a:	af00      	add	r7, sp, #0
 800263c:	4603      	mov	r3, r0
 800263e:	60b9      	str	r1, [r7, #8]
 8002640:	607a      	str	r2, [r7, #4]
 8002642:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002648:	f7ff ff3e 	bl	80024c8 <__NVIC_GetPriorityGrouping>
 800264c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	68b9      	ldr	r1, [r7, #8]
 8002652:	6978      	ldr	r0, [r7, #20]
 8002654:	f7ff ff8e 	bl	8002574 <NVIC_EncodePriority>
 8002658:	4602      	mov	r2, r0
 800265a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800265e:	4611      	mov	r1, r2
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff ff5d 	bl	8002520 <__NVIC_SetPriority>
}
 8002666:	bf00      	nop
 8002668:	3718      	adds	r7, #24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
 8002674:	4603      	mov	r3, r0
 8002676:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff ff31 	bl	80024e4 <__NVIC_EnableIRQ>
}
 8002682:	bf00      	nop
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b082      	sub	sp, #8
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7ff ffa2 	bl	80025dc <SysTick_Config>
 8002698:	4603      	mov	r3, r0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
	...

080026a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b089      	sub	sp, #36	; 0x24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026ae:	2300      	movs	r3, #0
 80026b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026b2:	2300      	movs	r3, #0
 80026b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ba:	2300      	movs	r3, #0
 80026bc:	61fb      	str	r3, [r7, #28]
 80026be:	e165      	b.n	800298c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026c0:	2201      	movs	r2, #1
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	4013      	ands	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	429a      	cmp	r2, r3
 80026da:	f040 8154 	bne.w	8002986 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d00b      	beq.n	80026fe <HAL_GPIO_Init+0x5a>
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d007      	beq.n	80026fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026f2:	2b11      	cmp	r3, #17
 80026f4:	d003      	beq.n	80026fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	2b12      	cmp	r3, #18
 80026fc:	d130      	bne.n	8002760 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	2203      	movs	r2, #3
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43db      	mvns	r3, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4013      	ands	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	68da      	ldr	r2, [r3, #12]
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4313      	orrs	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002734:	2201      	movs	r2, #1
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	43db      	mvns	r3, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4013      	ands	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	091b      	lsrs	r3, r3, #4
 800274a:	f003 0201 	and.w	r2, r3, #1
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4313      	orrs	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	2203      	movs	r2, #3
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	43db      	mvns	r3, r3
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4013      	ands	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4313      	orrs	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	2b02      	cmp	r3, #2
 8002796:	d003      	beq.n	80027a0 <HAL_GPIO_Init+0xfc>
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	2b12      	cmp	r3, #18
 800279e:	d123      	bne.n	80027e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	08da      	lsrs	r2, r3, #3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3208      	adds	r2, #8
 80027a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	220f      	movs	r2, #15
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	43db      	mvns	r3, r3
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4013      	ands	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	691a      	ldr	r2, [r3, #16]
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	08da      	lsrs	r2, r3, #3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	3208      	adds	r2, #8
 80027e2:	69b9      	ldr	r1, [r7, #24]
 80027e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	2203      	movs	r2, #3
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	43db      	mvns	r3, r3
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4013      	ands	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f003 0203 	and.w	r2, r3, #3
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4313      	orrs	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 80ae 	beq.w	8002986 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	4b5d      	ldr	r3, [pc, #372]	; (80029a4 <HAL_GPIO_Init+0x300>)
 8002830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002832:	4a5c      	ldr	r2, [pc, #368]	; (80029a4 <HAL_GPIO_Init+0x300>)
 8002834:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002838:	6453      	str	r3, [r2, #68]	; 0x44
 800283a:	4b5a      	ldr	r3, [pc, #360]	; (80029a4 <HAL_GPIO_Init+0x300>)
 800283c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002846:	4a58      	ldr	r2, [pc, #352]	; (80029a8 <HAL_GPIO_Init+0x304>)
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	089b      	lsrs	r3, r3, #2
 800284c:	3302      	adds	r3, #2
 800284e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002852:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	220f      	movs	r2, #15
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	43db      	mvns	r3, r3
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4013      	ands	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a4f      	ldr	r2, [pc, #316]	; (80029ac <HAL_GPIO_Init+0x308>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d025      	beq.n	80028be <HAL_GPIO_Init+0x21a>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a4e      	ldr	r2, [pc, #312]	; (80029b0 <HAL_GPIO_Init+0x30c>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d01f      	beq.n	80028ba <HAL_GPIO_Init+0x216>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a4d      	ldr	r2, [pc, #308]	; (80029b4 <HAL_GPIO_Init+0x310>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d019      	beq.n	80028b6 <HAL_GPIO_Init+0x212>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a4c      	ldr	r2, [pc, #304]	; (80029b8 <HAL_GPIO_Init+0x314>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d013      	beq.n	80028b2 <HAL_GPIO_Init+0x20e>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a4b      	ldr	r2, [pc, #300]	; (80029bc <HAL_GPIO_Init+0x318>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d00d      	beq.n	80028ae <HAL_GPIO_Init+0x20a>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a4a      	ldr	r2, [pc, #296]	; (80029c0 <HAL_GPIO_Init+0x31c>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d007      	beq.n	80028aa <HAL_GPIO_Init+0x206>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a49      	ldr	r2, [pc, #292]	; (80029c4 <HAL_GPIO_Init+0x320>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d101      	bne.n	80028a6 <HAL_GPIO_Init+0x202>
 80028a2:	2306      	movs	r3, #6
 80028a4:	e00c      	b.n	80028c0 <HAL_GPIO_Init+0x21c>
 80028a6:	2307      	movs	r3, #7
 80028a8:	e00a      	b.n	80028c0 <HAL_GPIO_Init+0x21c>
 80028aa:	2305      	movs	r3, #5
 80028ac:	e008      	b.n	80028c0 <HAL_GPIO_Init+0x21c>
 80028ae:	2304      	movs	r3, #4
 80028b0:	e006      	b.n	80028c0 <HAL_GPIO_Init+0x21c>
 80028b2:	2303      	movs	r3, #3
 80028b4:	e004      	b.n	80028c0 <HAL_GPIO_Init+0x21c>
 80028b6:	2302      	movs	r3, #2
 80028b8:	e002      	b.n	80028c0 <HAL_GPIO_Init+0x21c>
 80028ba:	2301      	movs	r3, #1
 80028bc:	e000      	b.n	80028c0 <HAL_GPIO_Init+0x21c>
 80028be:	2300      	movs	r3, #0
 80028c0:	69fa      	ldr	r2, [r7, #28]
 80028c2:	f002 0203 	and.w	r2, r2, #3
 80028c6:	0092      	lsls	r2, r2, #2
 80028c8:	4093      	lsls	r3, r2
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028d0:	4935      	ldr	r1, [pc, #212]	; (80029a8 <HAL_GPIO_Init+0x304>)
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	089b      	lsrs	r3, r3, #2
 80028d6:	3302      	adds	r3, #2
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028de:	4b3a      	ldr	r3, [pc, #232]	; (80029c8 <HAL_GPIO_Init+0x324>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	43db      	mvns	r3, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4013      	ands	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	4313      	orrs	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002902:	4a31      	ldr	r2, [pc, #196]	; (80029c8 <HAL_GPIO_Init+0x324>)
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002908:	4b2f      	ldr	r3, [pc, #188]	; (80029c8 <HAL_GPIO_Init+0x324>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	43db      	mvns	r3, r3
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	4013      	ands	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	4313      	orrs	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800292c:	4a26      	ldr	r2, [pc, #152]	; (80029c8 <HAL_GPIO_Init+0x324>)
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002932:	4b25      	ldr	r3, [pc, #148]	; (80029c8 <HAL_GPIO_Init+0x324>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	43db      	mvns	r3, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4013      	ands	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	4313      	orrs	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002956:	4a1c      	ldr	r2, [pc, #112]	; (80029c8 <HAL_GPIO_Init+0x324>)
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800295c:	4b1a      	ldr	r3, [pc, #104]	; (80029c8 <HAL_GPIO_Init+0x324>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	43db      	mvns	r3, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4013      	ands	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	4313      	orrs	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002980:	4a11      	ldr	r2, [pc, #68]	; (80029c8 <HAL_GPIO_Init+0x324>)
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	3301      	adds	r3, #1
 800298a:	61fb      	str	r3, [r7, #28]
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	2b0f      	cmp	r3, #15
 8002990:	f67f ae96 	bls.w	80026c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002994:	bf00      	nop
 8002996:	bf00      	nop
 8002998:	3724      	adds	r7, #36	; 0x24
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	40023800 	.word	0x40023800
 80029a8:	40013800 	.word	0x40013800
 80029ac:	40020000 	.word	0x40020000
 80029b0:	40020400 	.word	0x40020400
 80029b4:	40020800 	.word	0x40020800
 80029b8:	40020c00 	.word	0x40020c00
 80029bc:	40021000 	.word	0x40021000
 80029c0:	40021400 	.word	0x40021400
 80029c4:	40021800 	.word	0x40021800
 80029c8:	40013c00 	.word	0x40013c00

080029cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	460b      	mov	r3, r1
 80029d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	691a      	ldr	r2, [r3, #16]
 80029dc:	887b      	ldrh	r3, [r7, #2]
 80029de:	4013      	ands	r3, r2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d002      	beq.n	80029ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029e4:	2301      	movs	r3, #1
 80029e6:	73fb      	strb	r3, [r7, #15]
 80029e8:	e001      	b.n	80029ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029ea:	2300      	movs	r3, #0
 80029ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3714      	adds	r7, #20
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	460b      	mov	r3, r1
 8002a06:	807b      	strh	r3, [r7, #2]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a0c:	787b      	ldrb	r3, [r7, #1]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a12:	887a      	ldrh	r2, [r7, #2]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a18:	e003      	b.n	8002a22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a1a:	887b      	ldrh	r3, [r7, #2]
 8002a1c:	041a      	lsls	r2, r3, #16
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	619a      	str	r2, [r3, #24]
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
	...

08002a30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e0cc      	b.n	8002bde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a44:	4b68      	ldr	r3, [pc, #416]	; (8002be8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 030f 	and.w	r3, r3, #15
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d90c      	bls.n	8002a6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a52:	4b65      	ldr	r3, [pc, #404]	; (8002be8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a5a:	4b63      	ldr	r3, [pc, #396]	; (8002be8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d001      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e0b8      	b.n	8002bde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d020      	beq.n	8002aba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d005      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a84:	4b59      	ldr	r3, [pc, #356]	; (8002bec <HAL_RCC_ClockConfig+0x1bc>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	4a58      	ldr	r2, [pc, #352]	; (8002bec <HAL_RCC_ClockConfig+0x1bc>)
 8002a8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d005      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a9c:	4b53      	ldr	r3, [pc, #332]	; (8002bec <HAL_RCC_ClockConfig+0x1bc>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	4a52      	ldr	r2, [pc, #328]	; (8002bec <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002aa6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aa8:	4b50      	ldr	r3, [pc, #320]	; (8002bec <HAL_RCC_ClockConfig+0x1bc>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	494d      	ldr	r1, [pc, #308]	; (8002bec <HAL_RCC_ClockConfig+0x1bc>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d044      	beq.n	8002b50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d107      	bne.n	8002ade <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ace:	4b47      	ldr	r3, [pc, #284]	; (8002bec <HAL_RCC_ClockConfig+0x1bc>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d119      	bne.n	8002b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e07f      	b.n	8002bde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d003      	beq.n	8002aee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aea:	2b03      	cmp	r3, #3
 8002aec:	d107      	bne.n	8002afe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aee:	4b3f      	ldr	r3, [pc, #252]	; (8002bec <HAL_RCC_ClockConfig+0x1bc>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d109      	bne.n	8002b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e06f      	b.n	8002bde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002afe:	4b3b      	ldr	r3, [pc, #236]	; (8002bec <HAL_RCC_ClockConfig+0x1bc>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e067      	b.n	8002bde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b0e:	4b37      	ldr	r3, [pc, #220]	; (8002bec <HAL_RCC_ClockConfig+0x1bc>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f023 0203 	bic.w	r2, r3, #3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	4934      	ldr	r1, [pc, #208]	; (8002bec <HAL_RCC_ClockConfig+0x1bc>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b20:	f7fe fba0 	bl	8001264 <HAL_GetTick>
 8002b24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b26:	e00a      	b.n	8002b3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b28:	f7fe fb9c 	bl	8001264 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e04f      	b.n	8002bde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3e:	4b2b      	ldr	r3, [pc, #172]	; (8002bec <HAL_RCC_ClockConfig+0x1bc>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 020c 	and.w	r2, r3, #12
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d1eb      	bne.n	8002b28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b50:	4b25      	ldr	r3, [pc, #148]	; (8002be8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 030f 	and.w	r3, r3, #15
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d20c      	bcs.n	8002b78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b5e:	4b22      	ldr	r3, [pc, #136]	; (8002be8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b66:	4b20      	ldr	r3, [pc, #128]	; (8002be8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d001      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e032      	b.n	8002bde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d008      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b84:	4b19      	ldr	r3, [pc, #100]	; (8002bec <HAL_RCC_ClockConfig+0x1bc>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	4916      	ldr	r1, [pc, #88]	; (8002bec <HAL_RCC_ClockConfig+0x1bc>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0308 	and.w	r3, r3, #8
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d009      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ba2:	4b12      	ldr	r3, [pc, #72]	; (8002bec <HAL_RCC_ClockConfig+0x1bc>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	490e      	ldr	r1, [pc, #56]	; (8002bec <HAL_RCC_ClockConfig+0x1bc>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bb6:	f000 f855 	bl	8002c64 <HAL_RCC_GetSysClockFreq>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	4b0b      	ldr	r3, [pc, #44]	; (8002bec <HAL_RCC_ClockConfig+0x1bc>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	091b      	lsrs	r3, r3, #4
 8002bc2:	f003 030f 	and.w	r3, r3, #15
 8002bc6:	490a      	ldr	r1, [pc, #40]	; (8002bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002bc8:	5ccb      	ldrb	r3, [r1, r3]
 8002bca:	fa22 f303 	lsr.w	r3, r2, r3
 8002bce:	4a09      	ldr	r2, [pc, #36]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bd2:	4b09      	ldr	r3, [pc, #36]	; (8002bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fe fb00 	bl	80011dc <HAL_InitTick>

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	40023c00 	.word	0x40023c00
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	08003cc0 	.word	0x08003cc0
 8002bf4:	20000000 	.word	0x20000000
 8002bf8:	20000004 	.word	0x20000004

08002bfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c00:	4b03      	ldr	r3, [pc, #12]	; (8002c10 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c02:	681b      	ldr	r3, [r3, #0]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	20000000 	.word	0x20000000

08002c14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c18:	f7ff fff0 	bl	8002bfc <HAL_RCC_GetHCLKFreq>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	0a9b      	lsrs	r3, r3, #10
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	4903      	ldr	r1, [pc, #12]	; (8002c38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c2a:	5ccb      	ldrb	r3, [r1, r3]
 8002c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40023800 	.word	0x40023800
 8002c38:	08003cd0 	.word	0x08003cd0

08002c3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c40:	f7ff ffdc 	bl	8002bfc <HAL_RCC_GetHCLKFreq>
 8002c44:	4602      	mov	r2, r0
 8002c46:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	0b5b      	lsrs	r3, r3, #13
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	4903      	ldr	r1, [pc, #12]	; (8002c60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c52:	5ccb      	ldrb	r3, [r1, r3]
 8002c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	08003cd0 	.word	0x08003cd0

08002c64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c68:	b088      	sub	sp, #32
 8002c6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8002c74:	2300      	movs	r3, #0
 8002c76:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c80:	4bce      	ldr	r3, [pc, #824]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x358>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f003 030c 	and.w	r3, r3, #12
 8002c88:	2b0c      	cmp	r3, #12
 8002c8a:	f200 818d 	bhi.w	8002fa8 <HAL_RCC_GetSysClockFreq+0x344>
 8002c8e:	a201      	add	r2, pc, #4	; (adr r2, 8002c94 <HAL_RCC_GetSysClockFreq+0x30>)
 8002c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c94:	08002cc9 	.word	0x08002cc9
 8002c98:	08002fa9 	.word	0x08002fa9
 8002c9c:	08002fa9 	.word	0x08002fa9
 8002ca0:	08002fa9 	.word	0x08002fa9
 8002ca4:	08002ccf 	.word	0x08002ccf
 8002ca8:	08002fa9 	.word	0x08002fa9
 8002cac:	08002fa9 	.word	0x08002fa9
 8002cb0:	08002fa9 	.word	0x08002fa9
 8002cb4:	08002cd5 	.word	0x08002cd5
 8002cb8:	08002fa9 	.word	0x08002fa9
 8002cbc:	08002fa9 	.word	0x08002fa9
 8002cc0:	08002fa9 	.word	0x08002fa9
 8002cc4:	08002e49 	.word	0x08002e49
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cc8:	4bbd      	ldr	r3, [pc, #756]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002cca:	61bb      	str	r3, [r7, #24]
       break;
 8002ccc:	e16f      	b.n	8002fae <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cce:	4bbd      	ldr	r3, [pc, #756]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x360>)
 8002cd0:	61bb      	str	r3, [r7, #24]
      break;
 8002cd2:	e16c      	b.n	8002fae <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cd4:	4bb9      	ldr	r3, [pc, #740]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x358>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cdc:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cde:	4bb7      	ldr	r3, [pc, #732]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x358>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d053      	beq.n	8002d92 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cea:	4bb4      	ldr	r3, [pc, #720]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x358>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	099b      	lsrs	r3, r3, #6
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	f04f 0300 	mov.w	r3, #0
 8002cf6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002cfa:	f04f 0100 	mov.w	r1, #0
 8002cfe:	ea02 0400 	and.w	r4, r2, r0
 8002d02:	603c      	str	r4, [r7, #0]
 8002d04:	400b      	ands	r3, r1
 8002d06:	607b      	str	r3, [r7, #4]
 8002d08:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d0c:	4620      	mov	r0, r4
 8002d0e:	4629      	mov	r1, r5
 8002d10:	f04f 0200 	mov.w	r2, #0
 8002d14:	f04f 0300 	mov.w	r3, #0
 8002d18:	014b      	lsls	r3, r1, #5
 8002d1a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d1e:	0142      	lsls	r2, r0, #5
 8002d20:	4610      	mov	r0, r2
 8002d22:	4619      	mov	r1, r3
 8002d24:	4623      	mov	r3, r4
 8002d26:	1ac0      	subs	r0, r0, r3
 8002d28:	462b      	mov	r3, r5
 8002d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8002d2e:	f04f 0200 	mov.w	r2, #0
 8002d32:	f04f 0300 	mov.w	r3, #0
 8002d36:	018b      	lsls	r3, r1, #6
 8002d38:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d3c:	0182      	lsls	r2, r0, #6
 8002d3e:	1a12      	subs	r2, r2, r0
 8002d40:	eb63 0301 	sbc.w	r3, r3, r1
 8002d44:	f04f 0000 	mov.w	r0, #0
 8002d48:	f04f 0100 	mov.w	r1, #0
 8002d4c:	00d9      	lsls	r1, r3, #3
 8002d4e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d52:	00d0      	lsls	r0, r2, #3
 8002d54:	4602      	mov	r2, r0
 8002d56:	460b      	mov	r3, r1
 8002d58:	4621      	mov	r1, r4
 8002d5a:	1852      	adds	r2, r2, r1
 8002d5c:	4629      	mov	r1, r5
 8002d5e:	eb43 0101 	adc.w	r1, r3, r1
 8002d62:	460b      	mov	r3, r1
 8002d64:	f04f 0000 	mov.w	r0, #0
 8002d68:	f04f 0100 	mov.w	r1, #0
 8002d6c:	0259      	lsls	r1, r3, #9
 8002d6e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002d72:	0250      	lsls	r0, r2, #9
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4610      	mov	r0, r2
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	f04f 0300 	mov.w	r3, #0
 8002d84:	f7fd fa3e 	bl	8000204 <__aeabi_uldivmod>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	61fb      	str	r3, [r7, #28]
 8002d90:	e04c      	b.n	8002e2c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d92:	4b8a      	ldr	r3, [pc, #552]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x358>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	099b      	lsrs	r3, r3, #6
 8002d98:	461a      	mov	r2, r3
 8002d9a:	f04f 0300 	mov.w	r3, #0
 8002d9e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002da2:	f04f 0100 	mov.w	r1, #0
 8002da6:	ea02 0a00 	and.w	sl, r2, r0
 8002daa:	ea03 0b01 	and.w	fp, r3, r1
 8002dae:	4650      	mov	r0, sl
 8002db0:	4659      	mov	r1, fp
 8002db2:	f04f 0200 	mov.w	r2, #0
 8002db6:	f04f 0300 	mov.w	r3, #0
 8002dba:	014b      	lsls	r3, r1, #5
 8002dbc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002dc0:	0142      	lsls	r2, r0, #5
 8002dc2:	4610      	mov	r0, r2
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	ebb0 000a 	subs.w	r0, r0, sl
 8002dca:	eb61 010b 	sbc.w	r1, r1, fp
 8002dce:	f04f 0200 	mov.w	r2, #0
 8002dd2:	f04f 0300 	mov.w	r3, #0
 8002dd6:	018b      	lsls	r3, r1, #6
 8002dd8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ddc:	0182      	lsls	r2, r0, #6
 8002dde:	1a12      	subs	r2, r2, r0
 8002de0:	eb63 0301 	sbc.w	r3, r3, r1
 8002de4:	f04f 0000 	mov.w	r0, #0
 8002de8:	f04f 0100 	mov.w	r1, #0
 8002dec:	00d9      	lsls	r1, r3, #3
 8002dee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002df2:	00d0      	lsls	r0, r2, #3
 8002df4:	4602      	mov	r2, r0
 8002df6:	460b      	mov	r3, r1
 8002df8:	eb12 020a 	adds.w	r2, r2, sl
 8002dfc:	eb43 030b 	adc.w	r3, r3, fp
 8002e00:	f04f 0000 	mov.w	r0, #0
 8002e04:	f04f 0100 	mov.w	r1, #0
 8002e08:	0299      	lsls	r1, r3, #10
 8002e0a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002e0e:	0290      	lsls	r0, r2, #10
 8002e10:	4602      	mov	r2, r0
 8002e12:	460b      	mov	r3, r1
 8002e14:	4610      	mov	r0, r2
 8002e16:	4619      	mov	r1, r3
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	f04f 0300 	mov.w	r3, #0
 8002e20:	f7fd f9f0 	bl	8000204 <__aeabi_uldivmod>
 8002e24:	4602      	mov	r2, r0
 8002e26:	460b      	mov	r3, r1
 8002e28:	4613      	mov	r3, r2
 8002e2a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e2c:	4b63      	ldr	r3, [pc, #396]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x358>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	0c1b      	lsrs	r3, r3, #16
 8002e32:	f003 0303 	and.w	r3, r3, #3
 8002e36:	3301      	adds	r3, #1
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8002e3c:	69fa      	ldr	r2, [r7, #28]
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e44:	61bb      	str	r3, [r7, #24]
      break;
 8002e46:	e0b2      	b.n	8002fae <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e48:	4b5c      	ldr	r3, [pc, #368]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x358>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e50:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e52:	4b5a      	ldr	r3, [pc, #360]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x358>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d04d      	beq.n	8002efa <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e5e:	4b57      	ldr	r3, [pc, #348]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x358>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	099b      	lsrs	r3, r3, #6
 8002e64:	461a      	mov	r2, r3
 8002e66:	f04f 0300 	mov.w	r3, #0
 8002e6a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e6e:	f04f 0100 	mov.w	r1, #0
 8002e72:	ea02 0800 	and.w	r8, r2, r0
 8002e76:	ea03 0901 	and.w	r9, r3, r1
 8002e7a:	4640      	mov	r0, r8
 8002e7c:	4649      	mov	r1, r9
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	f04f 0300 	mov.w	r3, #0
 8002e86:	014b      	lsls	r3, r1, #5
 8002e88:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e8c:	0142      	lsls	r2, r0, #5
 8002e8e:	4610      	mov	r0, r2
 8002e90:	4619      	mov	r1, r3
 8002e92:	ebb0 0008 	subs.w	r0, r0, r8
 8002e96:	eb61 0109 	sbc.w	r1, r1, r9
 8002e9a:	f04f 0200 	mov.w	r2, #0
 8002e9e:	f04f 0300 	mov.w	r3, #0
 8002ea2:	018b      	lsls	r3, r1, #6
 8002ea4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ea8:	0182      	lsls	r2, r0, #6
 8002eaa:	1a12      	subs	r2, r2, r0
 8002eac:	eb63 0301 	sbc.w	r3, r3, r1
 8002eb0:	f04f 0000 	mov.w	r0, #0
 8002eb4:	f04f 0100 	mov.w	r1, #0
 8002eb8:	00d9      	lsls	r1, r3, #3
 8002eba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ebe:	00d0      	lsls	r0, r2, #3
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	eb12 0208 	adds.w	r2, r2, r8
 8002ec8:	eb43 0309 	adc.w	r3, r3, r9
 8002ecc:	f04f 0000 	mov.w	r0, #0
 8002ed0:	f04f 0100 	mov.w	r1, #0
 8002ed4:	0259      	lsls	r1, r3, #9
 8002ed6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002eda:	0250      	lsls	r0, r2, #9
 8002edc:	4602      	mov	r2, r0
 8002ede:	460b      	mov	r3, r1
 8002ee0:	4610      	mov	r0, r2
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	f04f 0300 	mov.w	r3, #0
 8002eec:	f7fd f98a 	bl	8000204 <__aeabi_uldivmod>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	61fb      	str	r3, [r7, #28]
 8002ef8:	e04a      	b.n	8002f90 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002efa:	4b30      	ldr	r3, [pc, #192]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x358>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	099b      	lsrs	r3, r3, #6
 8002f00:	461a      	mov	r2, r3
 8002f02:	f04f 0300 	mov.w	r3, #0
 8002f06:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f0a:	f04f 0100 	mov.w	r1, #0
 8002f0e:	ea02 0400 	and.w	r4, r2, r0
 8002f12:	ea03 0501 	and.w	r5, r3, r1
 8002f16:	4620      	mov	r0, r4
 8002f18:	4629      	mov	r1, r5
 8002f1a:	f04f 0200 	mov.w	r2, #0
 8002f1e:	f04f 0300 	mov.w	r3, #0
 8002f22:	014b      	lsls	r3, r1, #5
 8002f24:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f28:	0142      	lsls	r2, r0, #5
 8002f2a:	4610      	mov	r0, r2
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	1b00      	subs	r0, r0, r4
 8002f30:	eb61 0105 	sbc.w	r1, r1, r5
 8002f34:	f04f 0200 	mov.w	r2, #0
 8002f38:	f04f 0300 	mov.w	r3, #0
 8002f3c:	018b      	lsls	r3, r1, #6
 8002f3e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f42:	0182      	lsls	r2, r0, #6
 8002f44:	1a12      	subs	r2, r2, r0
 8002f46:	eb63 0301 	sbc.w	r3, r3, r1
 8002f4a:	f04f 0000 	mov.w	r0, #0
 8002f4e:	f04f 0100 	mov.w	r1, #0
 8002f52:	00d9      	lsls	r1, r3, #3
 8002f54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f58:	00d0      	lsls	r0, r2, #3
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	1912      	adds	r2, r2, r4
 8002f60:	eb45 0303 	adc.w	r3, r5, r3
 8002f64:	f04f 0000 	mov.w	r0, #0
 8002f68:	f04f 0100 	mov.w	r1, #0
 8002f6c:	0299      	lsls	r1, r3, #10
 8002f6e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002f72:	0290      	lsls	r0, r2, #10
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	4610      	mov	r0, r2
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	f04f 0300 	mov.w	r3, #0
 8002f84:	f7fd f93e 	bl	8000204 <__aeabi_uldivmod>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002f90:	4b0a      	ldr	r3, [pc, #40]	; (8002fbc <HAL_RCC_GetSysClockFreq+0x358>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	0f1b      	lsrs	r3, r3, #28
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8002f9c:	69fa      	ldr	r2, [r7, #28]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa4:	61bb      	str	r3, [r7, #24]
      break;
 8002fa6:	e002      	b.n	8002fae <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fa8:	4b05      	ldr	r3, [pc, #20]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002faa:	61bb      	str	r3, [r7, #24]
      break;
 8002fac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fae:	69bb      	ldr	r3, [r7, #24]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3720      	adds	r7, #32
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fba:	bf00      	nop
 8002fbc:	40023800 	.word	0x40023800
 8002fc0:	00f42400 	.word	0x00f42400
 8002fc4:	007a1200 	.word	0x007a1200

08002fc8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 8083 	beq.w	80030e8 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002fe2:	4b95      	ldr	r3, [pc, #596]	; (8003238 <HAL_RCC_OscConfig+0x270>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 030c 	and.w	r3, r3, #12
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	d019      	beq.n	8003022 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002fee:	4b92      	ldr	r3, [pc, #584]	; (8003238 <HAL_RCC_OscConfig+0x270>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ff6:	2b08      	cmp	r3, #8
 8002ff8:	d106      	bne.n	8003008 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ffa:	4b8f      	ldr	r3, [pc, #572]	; (8003238 <HAL_RCC_OscConfig+0x270>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003002:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003006:	d00c      	beq.n	8003022 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003008:	4b8b      	ldr	r3, [pc, #556]	; (8003238 <HAL_RCC_OscConfig+0x270>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003010:	2b0c      	cmp	r3, #12
 8003012:	d112      	bne.n	800303a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003014:	4b88      	ldr	r3, [pc, #544]	; (8003238 <HAL_RCC_OscConfig+0x270>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800301c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003020:	d10b      	bne.n	800303a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003022:	4b85      	ldr	r3, [pc, #532]	; (8003238 <HAL_RCC_OscConfig+0x270>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d05b      	beq.n	80030e6 <HAL_RCC_OscConfig+0x11e>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d157      	bne.n	80030e6 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e216      	b.n	8003468 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003042:	d106      	bne.n	8003052 <HAL_RCC_OscConfig+0x8a>
 8003044:	4b7c      	ldr	r3, [pc, #496]	; (8003238 <HAL_RCC_OscConfig+0x270>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a7b      	ldr	r2, [pc, #492]	; (8003238 <HAL_RCC_OscConfig+0x270>)
 800304a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800304e:	6013      	str	r3, [r2, #0]
 8003050:	e01d      	b.n	800308e <HAL_RCC_OscConfig+0xc6>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800305a:	d10c      	bne.n	8003076 <HAL_RCC_OscConfig+0xae>
 800305c:	4b76      	ldr	r3, [pc, #472]	; (8003238 <HAL_RCC_OscConfig+0x270>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a75      	ldr	r2, [pc, #468]	; (8003238 <HAL_RCC_OscConfig+0x270>)
 8003062:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003066:	6013      	str	r3, [r2, #0]
 8003068:	4b73      	ldr	r3, [pc, #460]	; (8003238 <HAL_RCC_OscConfig+0x270>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a72      	ldr	r2, [pc, #456]	; (8003238 <HAL_RCC_OscConfig+0x270>)
 800306e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003072:	6013      	str	r3, [r2, #0]
 8003074:	e00b      	b.n	800308e <HAL_RCC_OscConfig+0xc6>
 8003076:	4b70      	ldr	r3, [pc, #448]	; (8003238 <HAL_RCC_OscConfig+0x270>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a6f      	ldr	r2, [pc, #444]	; (8003238 <HAL_RCC_OscConfig+0x270>)
 800307c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003080:	6013      	str	r3, [r2, #0]
 8003082:	4b6d      	ldr	r3, [pc, #436]	; (8003238 <HAL_RCC_OscConfig+0x270>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a6c      	ldr	r2, [pc, #432]	; (8003238 <HAL_RCC_OscConfig+0x270>)
 8003088:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800308c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d013      	beq.n	80030be <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003096:	f7fe f8e5 	bl	8001264 <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309c:	e008      	b.n	80030b0 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800309e:	f7fe f8e1 	bl	8001264 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b64      	cmp	r3, #100	; 0x64
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e1db      	b.n	8003468 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b0:	4b61      	ldr	r3, [pc, #388]	; (8003238 <HAL_RCC_OscConfig+0x270>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d0f0      	beq.n	800309e <HAL_RCC_OscConfig+0xd6>
 80030bc:	e014      	b.n	80030e8 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030be:	f7fe f8d1 	bl	8001264 <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030c6:	f7fe f8cd 	bl	8001264 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b64      	cmp	r3, #100	; 0x64
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e1c7      	b.n	8003468 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030d8:	4b57      	ldr	r3, [pc, #348]	; (8003238 <HAL_RCC_OscConfig+0x270>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1f0      	bne.n	80030c6 <HAL_RCC_OscConfig+0xfe>
 80030e4:	e000      	b.n	80030e8 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d06f      	beq.n	80031d4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80030f4:	4b50      	ldr	r3, [pc, #320]	; (8003238 <HAL_RCC_OscConfig+0x270>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f003 030c 	and.w	r3, r3, #12
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d017      	beq.n	8003130 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003100:	4b4d      	ldr	r3, [pc, #308]	; (8003238 <HAL_RCC_OscConfig+0x270>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003108:	2b08      	cmp	r3, #8
 800310a:	d105      	bne.n	8003118 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800310c:	4b4a      	ldr	r3, [pc, #296]	; (8003238 <HAL_RCC_OscConfig+0x270>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00b      	beq.n	8003130 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003118:	4b47      	ldr	r3, [pc, #284]	; (8003238 <HAL_RCC_OscConfig+0x270>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003120:	2b0c      	cmp	r3, #12
 8003122:	d11c      	bne.n	800315e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003124:	4b44      	ldr	r3, [pc, #272]	; (8003238 <HAL_RCC_OscConfig+0x270>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d116      	bne.n	800315e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003130:	4b41      	ldr	r3, [pc, #260]	; (8003238 <HAL_RCC_OscConfig+0x270>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <HAL_RCC_OscConfig+0x180>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d001      	beq.n	8003148 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e18f      	b.n	8003468 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003148:	4b3b      	ldr	r3, [pc, #236]	; (8003238 <HAL_RCC_OscConfig+0x270>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	4938      	ldr	r1, [pc, #224]	; (8003238 <HAL_RCC_OscConfig+0x270>)
 8003158:	4313      	orrs	r3, r2
 800315a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800315c:	e03a      	b.n	80031d4 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d020      	beq.n	80031a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003166:	4b35      	ldr	r3, [pc, #212]	; (800323c <HAL_RCC_OscConfig+0x274>)
 8003168:	2201      	movs	r2, #1
 800316a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316c:	f7fe f87a 	bl	8001264 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003174:	f7fe f876 	bl	8001264 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e170      	b.n	8003468 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003186:	4b2c      	ldr	r3, [pc, #176]	; (8003238 <HAL_RCC_OscConfig+0x270>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0f0      	beq.n	8003174 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003192:	4b29      	ldr	r3, [pc, #164]	; (8003238 <HAL_RCC_OscConfig+0x270>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	4925      	ldr	r1, [pc, #148]	; (8003238 <HAL_RCC_OscConfig+0x270>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	600b      	str	r3, [r1, #0]
 80031a6:	e015      	b.n	80031d4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031a8:	4b24      	ldr	r3, [pc, #144]	; (800323c <HAL_RCC_OscConfig+0x274>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ae:	f7fe f859 	bl	8001264 <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031b6:	f7fe f855 	bl	8001264 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e14f      	b.n	8003468 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031c8:	4b1b      	ldr	r3, [pc, #108]	; (8003238 <HAL_RCC_OscConfig+0x270>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1f0      	bne.n	80031b6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0308 	and.w	r3, r3, #8
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d037      	beq.n	8003250 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d016      	beq.n	8003216 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031e8:	4b15      	ldr	r3, [pc, #84]	; (8003240 <HAL_RCC_OscConfig+0x278>)
 80031ea:	2201      	movs	r2, #1
 80031ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ee:	f7fe f839 	bl	8001264 <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031f4:	e008      	b.n	8003208 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031f6:	f7fe f835 	bl	8001264 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d901      	bls.n	8003208 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e12f      	b.n	8003468 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003208:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <HAL_RCC_OscConfig+0x270>)
 800320a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d0f0      	beq.n	80031f6 <HAL_RCC_OscConfig+0x22e>
 8003214:	e01c      	b.n	8003250 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003216:	4b0a      	ldr	r3, [pc, #40]	; (8003240 <HAL_RCC_OscConfig+0x278>)
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321c:	f7fe f822 	bl	8001264 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003222:	e00f      	b.n	8003244 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003224:	f7fe f81e 	bl	8001264 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d908      	bls.n	8003244 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e118      	b.n	8003468 <HAL_RCC_OscConfig+0x4a0>
 8003236:	bf00      	nop
 8003238:	40023800 	.word	0x40023800
 800323c:	42470000 	.word	0x42470000
 8003240:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003244:	4b8a      	ldr	r3, [pc, #552]	; (8003470 <HAL_RCC_OscConfig+0x4a8>)
 8003246:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1e9      	bne.n	8003224 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0304 	and.w	r3, r3, #4
 8003258:	2b00      	cmp	r3, #0
 800325a:	f000 8097 	beq.w	800338c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800325e:	2300      	movs	r3, #0
 8003260:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003262:	4b83      	ldr	r3, [pc, #524]	; (8003470 <HAL_RCC_OscConfig+0x4a8>)
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10f      	bne.n	800328e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800326e:	2300      	movs	r3, #0
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	4b7f      	ldr	r3, [pc, #508]	; (8003470 <HAL_RCC_OscConfig+0x4a8>)
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	4a7e      	ldr	r2, [pc, #504]	; (8003470 <HAL_RCC_OscConfig+0x4a8>)
 8003278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800327c:	6413      	str	r3, [r2, #64]	; 0x40
 800327e:	4b7c      	ldr	r3, [pc, #496]	; (8003470 <HAL_RCC_OscConfig+0x4a8>)
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800328a:	2301      	movs	r3, #1
 800328c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328e:	4b79      	ldr	r3, [pc, #484]	; (8003474 <HAL_RCC_OscConfig+0x4ac>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003296:	2b00      	cmp	r3, #0
 8003298:	d118      	bne.n	80032cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800329a:	4b76      	ldr	r3, [pc, #472]	; (8003474 <HAL_RCC_OscConfig+0x4ac>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a75      	ldr	r2, [pc, #468]	; (8003474 <HAL_RCC_OscConfig+0x4ac>)
 80032a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032a6:	f7fd ffdd 	bl	8001264 <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ac:	e008      	b.n	80032c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ae:	f7fd ffd9 	bl	8001264 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e0d3      	b.n	8003468 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c0:	4b6c      	ldr	r3, [pc, #432]	; (8003474 <HAL_RCC_OscConfig+0x4ac>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0f0      	beq.n	80032ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d106      	bne.n	80032e2 <HAL_RCC_OscConfig+0x31a>
 80032d4:	4b66      	ldr	r3, [pc, #408]	; (8003470 <HAL_RCC_OscConfig+0x4a8>)
 80032d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d8:	4a65      	ldr	r2, [pc, #404]	; (8003470 <HAL_RCC_OscConfig+0x4a8>)
 80032da:	f043 0301 	orr.w	r3, r3, #1
 80032de:	6713      	str	r3, [r2, #112]	; 0x70
 80032e0:	e01c      	b.n	800331c <HAL_RCC_OscConfig+0x354>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	2b05      	cmp	r3, #5
 80032e8:	d10c      	bne.n	8003304 <HAL_RCC_OscConfig+0x33c>
 80032ea:	4b61      	ldr	r3, [pc, #388]	; (8003470 <HAL_RCC_OscConfig+0x4a8>)
 80032ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ee:	4a60      	ldr	r2, [pc, #384]	; (8003470 <HAL_RCC_OscConfig+0x4a8>)
 80032f0:	f043 0304 	orr.w	r3, r3, #4
 80032f4:	6713      	str	r3, [r2, #112]	; 0x70
 80032f6:	4b5e      	ldr	r3, [pc, #376]	; (8003470 <HAL_RCC_OscConfig+0x4a8>)
 80032f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fa:	4a5d      	ldr	r2, [pc, #372]	; (8003470 <HAL_RCC_OscConfig+0x4a8>)
 80032fc:	f043 0301 	orr.w	r3, r3, #1
 8003300:	6713      	str	r3, [r2, #112]	; 0x70
 8003302:	e00b      	b.n	800331c <HAL_RCC_OscConfig+0x354>
 8003304:	4b5a      	ldr	r3, [pc, #360]	; (8003470 <HAL_RCC_OscConfig+0x4a8>)
 8003306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003308:	4a59      	ldr	r2, [pc, #356]	; (8003470 <HAL_RCC_OscConfig+0x4a8>)
 800330a:	f023 0301 	bic.w	r3, r3, #1
 800330e:	6713      	str	r3, [r2, #112]	; 0x70
 8003310:	4b57      	ldr	r3, [pc, #348]	; (8003470 <HAL_RCC_OscConfig+0x4a8>)
 8003312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003314:	4a56      	ldr	r2, [pc, #344]	; (8003470 <HAL_RCC_OscConfig+0x4a8>)
 8003316:	f023 0304 	bic.w	r3, r3, #4
 800331a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d015      	beq.n	8003350 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003324:	f7fd ff9e 	bl	8001264 <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800332a:	e00a      	b.n	8003342 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800332c:	f7fd ff9a 	bl	8001264 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	f241 3288 	movw	r2, #5000	; 0x1388
 800333a:	4293      	cmp	r3, r2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e092      	b.n	8003468 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003342:	4b4b      	ldr	r3, [pc, #300]	; (8003470 <HAL_RCC_OscConfig+0x4a8>)
 8003344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d0ee      	beq.n	800332c <HAL_RCC_OscConfig+0x364>
 800334e:	e014      	b.n	800337a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003350:	f7fd ff88 	bl	8001264 <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003356:	e00a      	b.n	800336e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003358:	f7fd ff84 	bl	8001264 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	f241 3288 	movw	r2, #5000	; 0x1388
 8003366:	4293      	cmp	r3, r2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e07c      	b.n	8003468 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800336e:	4b40      	ldr	r3, [pc, #256]	; (8003470 <HAL_RCC_OscConfig+0x4a8>)
 8003370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1ee      	bne.n	8003358 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800337a:	7dfb      	ldrb	r3, [r7, #23]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d105      	bne.n	800338c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003380:	4b3b      	ldr	r3, [pc, #236]	; (8003470 <HAL_RCC_OscConfig+0x4a8>)
 8003382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003384:	4a3a      	ldr	r2, [pc, #232]	; (8003470 <HAL_RCC_OscConfig+0x4a8>)
 8003386:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800338a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d068      	beq.n	8003466 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003394:	4b36      	ldr	r3, [pc, #216]	; (8003470 <HAL_RCC_OscConfig+0x4a8>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f003 030c 	and.w	r3, r3, #12
 800339c:	2b08      	cmp	r3, #8
 800339e:	d060      	beq.n	8003462 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d145      	bne.n	8003434 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033a8:	4b33      	ldr	r3, [pc, #204]	; (8003478 <HAL_RCC_OscConfig+0x4b0>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ae:	f7fd ff59 	bl	8001264 <HAL_GetTick>
 80033b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b4:	e008      	b.n	80033c8 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033b6:	f7fd ff55 	bl	8001264 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d901      	bls.n	80033c8 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e04f      	b.n	8003468 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033c8:	4b29      	ldr	r3, [pc, #164]	; (8003470 <HAL_RCC_OscConfig+0x4a8>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1f0      	bne.n	80033b6 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	69da      	ldr	r2, [r3, #28]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	431a      	orrs	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	019b      	lsls	r3, r3, #6
 80033e4:	431a      	orrs	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ea:	085b      	lsrs	r3, r3, #1
 80033ec:	3b01      	subs	r3, #1
 80033ee:	041b      	lsls	r3, r3, #16
 80033f0:	431a      	orrs	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f6:	061b      	lsls	r3, r3, #24
 80033f8:	431a      	orrs	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	071b      	lsls	r3, r3, #28
 8003400:	491b      	ldr	r1, [pc, #108]	; (8003470 <HAL_RCC_OscConfig+0x4a8>)
 8003402:	4313      	orrs	r3, r2
 8003404:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003406:	4b1c      	ldr	r3, [pc, #112]	; (8003478 <HAL_RCC_OscConfig+0x4b0>)
 8003408:	2201      	movs	r2, #1
 800340a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340c:	f7fd ff2a 	bl	8001264 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003414:	f7fd ff26 	bl	8001264 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e020      	b.n	8003468 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003426:	4b12      	ldr	r3, [pc, #72]	; (8003470 <HAL_RCC_OscConfig+0x4a8>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0f0      	beq.n	8003414 <HAL_RCC_OscConfig+0x44c>
 8003432:	e018      	b.n	8003466 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003434:	4b10      	ldr	r3, [pc, #64]	; (8003478 <HAL_RCC_OscConfig+0x4b0>)
 8003436:	2200      	movs	r2, #0
 8003438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343a:	f7fd ff13 	bl	8001264 <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003442:	f7fd ff0f 	bl	8001264 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e009      	b.n	8003468 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003454:	4b06      	ldr	r3, [pc, #24]	; (8003470 <HAL_RCC_OscConfig+0x4a8>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1f0      	bne.n	8003442 <HAL_RCC_OscConfig+0x47a>
 8003460:	e001      	b.n	8003466 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e000      	b.n	8003468 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3718      	adds	r7, #24
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40023800 	.word	0x40023800
 8003474:	40007000 	.word	0x40007000
 8003478:	42470060 	.word	0x42470060

0800347c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e03f      	b.n	800350e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d106      	bne.n	80034a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7fd fd40 	bl	8000f28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2224      	movs	r2, #36	; 0x24
 80034ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68da      	ldr	r2, [r3, #12]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 f829 	bl	8003518 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	691a      	ldr	r2, [r3, #16]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	695a      	ldr	r2, [r3, #20]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68da      	ldr	r2, [r3, #12]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2220      	movs	r2, #32
 8003500:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2220      	movs	r2, #32
 8003508:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
	...

08003518 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800351c:	b0bd      	sub	sp, #244	; 0xf4
 800351e:	af00      	add	r7, sp, #0
 8003520:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003534:	68d9      	ldr	r1, [r3, #12]
 8003536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	ea40 0301 	orr.w	r3, r0, r1
 8003540:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	431a      	orrs	r2, r3
 8003550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	431a      	orrs	r2, r3
 8003558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	4313      	orrs	r3, r2
 8003560:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8003564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003570:	f021 010c 	bic.w	r1, r1, #12
 8003574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800357e:	430b      	orrs	r3, r1
 8003580:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800358e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003592:	6999      	ldr	r1, [r3, #24]
 8003594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	ea40 0301 	orr.w	r3, r0, r1
 800359e:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035aa:	f040 81a5 	bne.w	80038f8 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	4bcd      	ldr	r3, [pc, #820]	; (80038ec <UART_SetConfig+0x3d4>)
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d006      	beq.n	80035c8 <UART_SetConfig+0xb0>
 80035ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	4bcb      	ldr	r3, [pc, #812]	; (80038f0 <UART_SetConfig+0x3d8>)
 80035c2:	429a      	cmp	r2, r3
 80035c4:	f040 80cb 	bne.w	800375e <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80035c8:	f7ff fb38 	bl	8002c3c <HAL_RCC_GetPCLK2Freq>
 80035cc:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80035d4:	461c      	mov	r4, r3
 80035d6:	f04f 0500 	mov.w	r5, #0
 80035da:	4622      	mov	r2, r4
 80035dc:	462b      	mov	r3, r5
 80035de:	1891      	adds	r1, r2, r2
 80035e0:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80035e4:	415b      	adcs	r3, r3
 80035e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80035ea:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80035ee:	1912      	adds	r2, r2, r4
 80035f0:	eb45 0303 	adc.w	r3, r5, r3
 80035f4:	f04f 0000 	mov.w	r0, #0
 80035f8:	f04f 0100 	mov.w	r1, #0
 80035fc:	00d9      	lsls	r1, r3, #3
 80035fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003602:	00d0      	lsls	r0, r2, #3
 8003604:	4602      	mov	r2, r0
 8003606:	460b      	mov	r3, r1
 8003608:	1911      	adds	r1, r2, r4
 800360a:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800360e:	416b      	adcs	r3, r5
 8003610:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	461a      	mov	r2, r3
 800361c:	f04f 0300 	mov.w	r3, #0
 8003620:	1891      	adds	r1, r2, r2
 8003622:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8003626:	415b      	adcs	r3, r3
 8003628:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800362c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003630:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8003634:	f7fc fde6 	bl	8000204 <__aeabi_uldivmod>
 8003638:	4602      	mov	r2, r0
 800363a:	460b      	mov	r3, r1
 800363c:	4bad      	ldr	r3, [pc, #692]	; (80038f4 <UART_SetConfig+0x3dc>)
 800363e:	fba3 2302 	umull	r2, r3, r3, r2
 8003642:	095b      	lsrs	r3, r3, #5
 8003644:	011e      	lsls	r6, r3, #4
 8003646:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800364a:	461c      	mov	r4, r3
 800364c:	f04f 0500 	mov.w	r5, #0
 8003650:	4622      	mov	r2, r4
 8003652:	462b      	mov	r3, r5
 8003654:	1891      	adds	r1, r2, r2
 8003656:	67b9      	str	r1, [r7, #120]	; 0x78
 8003658:	415b      	adcs	r3, r3
 800365a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800365c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003660:	1912      	adds	r2, r2, r4
 8003662:	eb45 0303 	adc.w	r3, r5, r3
 8003666:	f04f 0000 	mov.w	r0, #0
 800366a:	f04f 0100 	mov.w	r1, #0
 800366e:	00d9      	lsls	r1, r3, #3
 8003670:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003674:	00d0      	lsls	r0, r2, #3
 8003676:	4602      	mov	r2, r0
 8003678:	460b      	mov	r3, r1
 800367a:	1911      	adds	r1, r2, r4
 800367c:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8003680:	416b      	adcs	r3, r5
 8003682:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	461a      	mov	r2, r3
 800368e:	f04f 0300 	mov.w	r3, #0
 8003692:	1891      	adds	r1, r2, r2
 8003694:	6739      	str	r1, [r7, #112]	; 0x70
 8003696:	415b      	adcs	r3, r3
 8003698:	677b      	str	r3, [r7, #116]	; 0x74
 800369a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800369e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80036a2:	f7fc fdaf 	bl	8000204 <__aeabi_uldivmod>
 80036a6:	4602      	mov	r2, r0
 80036a8:	460b      	mov	r3, r1
 80036aa:	4b92      	ldr	r3, [pc, #584]	; (80038f4 <UART_SetConfig+0x3dc>)
 80036ac:	fba3 1302 	umull	r1, r3, r3, r2
 80036b0:	095b      	lsrs	r3, r3, #5
 80036b2:	2164      	movs	r1, #100	; 0x64
 80036b4:	fb01 f303 	mul.w	r3, r1, r3
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	3332      	adds	r3, #50	; 0x32
 80036be:	4a8d      	ldr	r2, [pc, #564]	; (80038f4 <UART_SetConfig+0x3dc>)
 80036c0:	fba2 2303 	umull	r2, r3, r2, r3
 80036c4:	095b      	lsrs	r3, r3, #5
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80036cc:	441e      	add	r6, r3
 80036ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80036d2:	4618      	mov	r0, r3
 80036d4:	f04f 0100 	mov.w	r1, #0
 80036d8:	4602      	mov	r2, r0
 80036da:	460b      	mov	r3, r1
 80036dc:	1894      	adds	r4, r2, r2
 80036de:	66bc      	str	r4, [r7, #104]	; 0x68
 80036e0:	415b      	adcs	r3, r3
 80036e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036e4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80036e8:	1812      	adds	r2, r2, r0
 80036ea:	eb41 0303 	adc.w	r3, r1, r3
 80036ee:	f04f 0400 	mov.w	r4, #0
 80036f2:	f04f 0500 	mov.w	r5, #0
 80036f6:	00dd      	lsls	r5, r3, #3
 80036f8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80036fc:	00d4      	lsls	r4, r2, #3
 80036fe:	4622      	mov	r2, r4
 8003700:	462b      	mov	r3, r5
 8003702:	1814      	adds	r4, r2, r0
 8003704:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8003708:	414b      	adcs	r3, r1
 800370a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800370e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	461a      	mov	r2, r3
 8003716:	f04f 0300 	mov.w	r3, #0
 800371a:	1891      	adds	r1, r2, r2
 800371c:	6639      	str	r1, [r7, #96]	; 0x60
 800371e:	415b      	adcs	r3, r3
 8003720:	667b      	str	r3, [r7, #100]	; 0x64
 8003722:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003726:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800372a:	f7fc fd6b 	bl	8000204 <__aeabi_uldivmod>
 800372e:	4602      	mov	r2, r0
 8003730:	460b      	mov	r3, r1
 8003732:	4b70      	ldr	r3, [pc, #448]	; (80038f4 <UART_SetConfig+0x3dc>)
 8003734:	fba3 1302 	umull	r1, r3, r3, r2
 8003738:	095b      	lsrs	r3, r3, #5
 800373a:	2164      	movs	r1, #100	; 0x64
 800373c:	fb01 f303 	mul.w	r3, r1, r3
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	3332      	adds	r3, #50	; 0x32
 8003746:	4a6b      	ldr	r2, [pc, #428]	; (80038f4 <UART_SetConfig+0x3dc>)
 8003748:	fba2 2303 	umull	r2, r3, r2, r3
 800374c:	095b      	lsrs	r3, r3, #5
 800374e:	f003 0207 	and.w	r2, r3, #7
 8003752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4432      	add	r2, r6
 800375a:	609a      	str	r2, [r3, #8]
 800375c:	e26d      	b.n	8003c3a <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800375e:	f7ff fa59 	bl	8002c14 <HAL_RCC_GetPCLK1Freq>
 8003762:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003766:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800376a:	461c      	mov	r4, r3
 800376c:	f04f 0500 	mov.w	r5, #0
 8003770:	4622      	mov	r2, r4
 8003772:	462b      	mov	r3, r5
 8003774:	1891      	adds	r1, r2, r2
 8003776:	65b9      	str	r1, [r7, #88]	; 0x58
 8003778:	415b      	adcs	r3, r3
 800377a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800377c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003780:	1912      	adds	r2, r2, r4
 8003782:	eb45 0303 	adc.w	r3, r5, r3
 8003786:	f04f 0000 	mov.w	r0, #0
 800378a:	f04f 0100 	mov.w	r1, #0
 800378e:	00d9      	lsls	r1, r3, #3
 8003790:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003794:	00d0      	lsls	r0, r2, #3
 8003796:	4602      	mov	r2, r0
 8003798:	460b      	mov	r3, r1
 800379a:	1911      	adds	r1, r2, r4
 800379c:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80037a0:	416b      	adcs	r3, r5
 80037a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80037a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	461a      	mov	r2, r3
 80037ae:	f04f 0300 	mov.w	r3, #0
 80037b2:	1891      	adds	r1, r2, r2
 80037b4:	6539      	str	r1, [r7, #80]	; 0x50
 80037b6:	415b      	adcs	r3, r3
 80037b8:	657b      	str	r3, [r7, #84]	; 0x54
 80037ba:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80037be:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80037c2:	f7fc fd1f 	bl	8000204 <__aeabi_uldivmod>
 80037c6:	4602      	mov	r2, r0
 80037c8:	460b      	mov	r3, r1
 80037ca:	4b4a      	ldr	r3, [pc, #296]	; (80038f4 <UART_SetConfig+0x3dc>)
 80037cc:	fba3 2302 	umull	r2, r3, r3, r2
 80037d0:	095b      	lsrs	r3, r3, #5
 80037d2:	011e      	lsls	r6, r3, #4
 80037d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80037d8:	461c      	mov	r4, r3
 80037da:	f04f 0500 	mov.w	r5, #0
 80037de:	4622      	mov	r2, r4
 80037e0:	462b      	mov	r3, r5
 80037e2:	1891      	adds	r1, r2, r2
 80037e4:	64b9      	str	r1, [r7, #72]	; 0x48
 80037e6:	415b      	adcs	r3, r3
 80037e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037ea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80037ee:	1912      	adds	r2, r2, r4
 80037f0:	eb45 0303 	adc.w	r3, r5, r3
 80037f4:	f04f 0000 	mov.w	r0, #0
 80037f8:	f04f 0100 	mov.w	r1, #0
 80037fc:	00d9      	lsls	r1, r3, #3
 80037fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003802:	00d0      	lsls	r0, r2, #3
 8003804:	4602      	mov	r2, r0
 8003806:	460b      	mov	r3, r1
 8003808:	1911      	adds	r1, r2, r4
 800380a:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800380e:	416b      	adcs	r3, r5
 8003810:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	461a      	mov	r2, r3
 800381c:	f04f 0300 	mov.w	r3, #0
 8003820:	1891      	adds	r1, r2, r2
 8003822:	6439      	str	r1, [r7, #64]	; 0x40
 8003824:	415b      	adcs	r3, r3
 8003826:	647b      	str	r3, [r7, #68]	; 0x44
 8003828:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800382c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8003830:	f7fc fce8 	bl	8000204 <__aeabi_uldivmod>
 8003834:	4602      	mov	r2, r0
 8003836:	460b      	mov	r3, r1
 8003838:	4b2e      	ldr	r3, [pc, #184]	; (80038f4 <UART_SetConfig+0x3dc>)
 800383a:	fba3 1302 	umull	r1, r3, r3, r2
 800383e:	095b      	lsrs	r3, r3, #5
 8003840:	2164      	movs	r1, #100	; 0x64
 8003842:	fb01 f303 	mul.w	r3, r1, r3
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	3332      	adds	r3, #50	; 0x32
 800384c:	4a29      	ldr	r2, [pc, #164]	; (80038f4 <UART_SetConfig+0x3dc>)
 800384e:	fba2 2303 	umull	r2, r3, r2, r3
 8003852:	095b      	lsrs	r3, r3, #5
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800385a:	441e      	add	r6, r3
 800385c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003860:	4618      	mov	r0, r3
 8003862:	f04f 0100 	mov.w	r1, #0
 8003866:	4602      	mov	r2, r0
 8003868:	460b      	mov	r3, r1
 800386a:	1894      	adds	r4, r2, r2
 800386c:	63bc      	str	r4, [r7, #56]	; 0x38
 800386e:	415b      	adcs	r3, r3
 8003870:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003872:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003876:	1812      	adds	r2, r2, r0
 8003878:	eb41 0303 	adc.w	r3, r1, r3
 800387c:	f04f 0400 	mov.w	r4, #0
 8003880:	f04f 0500 	mov.w	r5, #0
 8003884:	00dd      	lsls	r5, r3, #3
 8003886:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800388a:	00d4      	lsls	r4, r2, #3
 800388c:	4622      	mov	r2, r4
 800388e:	462b      	mov	r3, r5
 8003890:	1814      	adds	r4, r2, r0
 8003892:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8003896:	414b      	adcs	r3, r1
 8003898:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800389c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	461a      	mov	r2, r3
 80038a4:	f04f 0300 	mov.w	r3, #0
 80038a8:	1891      	adds	r1, r2, r2
 80038aa:	6339      	str	r1, [r7, #48]	; 0x30
 80038ac:	415b      	adcs	r3, r3
 80038ae:	637b      	str	r3, [r7, #52]	; 0x34
 80038b0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80038b4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80038b8:	f7fc fca4 	bl	8000204 <__aeabi_uldivmod>
 80038bc:	4602      	mov	r2, r0
 80038be:	460b      	mov	r3, r1
 80038c0:	4b0c      	ldr	r3, [pc, #48]	; (80038f4 <UART_SetConfig+0x3dc>)
 80038c2:	fba3 1302 	umull	r1, r3, r3, r2
 80038c6:	095b      	lsrs	r3, r3, #5
 80038c8:	2164      	movs	r1, #100	; 0x64
 80038ca:	fb01 f303 	mul.w	r3, r1, r3
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	00db      	lsls	r3, r3, #3
 80038d2:	3332      	adds	r3, #50	; 0x32
 80038d4:	4a07      	ldr	r2, [pc, #28]	; (80038f4 <UART_SetConfig+0x3dc>)
 80038d6:	fba2 2303 	umull	r2, r3, r2, r3
 80038da:	095b      	lsrs	r3, r3, #5
 80038dc:	f003 0207 	and.w	r2, r3, #7
 80038e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4432      	add	r2, r6
 80038e8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80038ea:	e1a6      	b.n	8003c3a <UART_SetConfig+0x722>
 80038ec:	40011000 	.word	0x40011000
 80038f0:	40011400 	.word	0x40011400
 80038f4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	4bd1      	ldr	r3, [pc, #836]	; (8003c44 <UART_SetConfig+0x72c>)
 8003900:	429a      	cmp	r2, r3
 8003902:	d006      	beq.n	8003912 <UART_SetConfig+0x3fa>
 8003904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	4bcf      	ldr	r3, [pc, #828]	; (8003c48 <UART_SetConfig+0x730>)
 800390c:	429a      	cmp	r2, r3
 800390e:	f040 80ca 	bne.w	8003aa6 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003912:	f7ff f993 	bl	8002c3c <HAL_RCC_GetPCLK2Freq>
 8003916:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800391a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800391e:	461c      	mov	r4, r3
 8003920:	f04f 0500 	mov.w	r5, #0
 8003924:	4622      	mov	r2, r4
 8003926:	462b      	mov	r3, r5
 8003928:	1891      	adds	r1, r2, r2
 800392a:	62b9      	str	r1, [r7, #40]	; 0x28
 800392c:	415b      	adcs	r3, r3
 800392e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003930:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003934:	1912      	adds	r2, r2, r4
 8003936:	eb45 0303 	adc.w	r3, r5, r3
 800393a:	f04f 0000 	mov.w	r0, #0
 800393e:	f04f 0100 	mov.w	r1, #0
 8003942:	00d9      	lsls	r1, r3, #3
 8003944:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003948:	00d0      	lsls	r0, r2, #3
 800394a:	4602      	mov	r2, r0
 800394c:	460b      	mov	r3, r1
 800394e:	eb12 0a04 	adds.w	sl, r2, r4
 8003952:	eb43 0b05 	adc.w	fp, r3, r5
 8003956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	4618      	mov	r0, r3
 800395e:	f04f 0100 	mov.w	r1, #0
 8003962:	f04f 0200 	mov.w	r2, #0
 8003966:	f04f 0300 	mov.w	r3, #0
 800396a:	008b      	lsls	r3, r1, #2
 800396c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003970:	0082      	lsls	r2, r0, #2
 8003972:	4650      	mov	r0, sl
 8003974:	4659      	mov	r1, fp
 8003976:	f7fc fc45 	bl	8000204 <__aeabi_uldivmod>
 800397a:	4602      	mov	r2, r0
 800397c:	460b      	mov	r3, r1
 800397e:	4bb3      	ldr	r3, [pc, #716]	; (8003c4c <UART_SetConfig+0x734>)
 8003980:	fba3 2302 	umull	r2, r3, r3, r2
 8003984:	095b      	lsrs	r3, r3, #5
 8003986:	011e      	lsls	r6, r3, #4
 8003988:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800398c:	4618      	mov	r0, r3
 800398e:	f04f 0100 	mov.w	r1, #0
 8003992:	4602      	mov	r2, r0
 8003994:	460b      	mov	r3, r1
 8003996:	1894      	adds	r4, r2, r2
 8003998:	623c      	str	r4, [r7, #32]
 800399a:	415b      	adcs	r3, r3
 800399c:	627b      	str	r3, [r7, #36]	; 0x24
 800399e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039a2:	1812      	adds	r2, r2, r0
 80039a4:	eb41 0303 	adc.w	r3, r1, r3
 80039a8:	f04f 0400 	mov.w	r4, #0
 80039ac:	f04f 0500 	mov.w	r5, #0
 80039b0:	00dd      	lsls	r5, r3, #3
 80039b2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80039b6:	00d4      	lsls	r4, r2, #3
 80039b8:	4622      	mov	r2, r4
 80039ba:	462b      	mov	r3, r5
 80039bc:	1814      	adds	r4, r2, r0
 80039be:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80039c2:	414b      	adcs	r3, r1
 80039c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80039c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f04f 0100 	mov.w	r1, #0
 80039d4:	f04f 0200 	mov.w	r2, #0
 80039d8:	f04f 0300 	mov.w	r3, #0
 80039dc:	008b      	lsls	r3, r1, #2
 80039de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80039e2:	0082      	lsls	r2, r0, #2
 80039e4:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80039e8:	f7fc fc0c 	bl	8000204 <__aeabi_uldivmod>
 80039ec:	4602      	mov	r2, r0
 80039ee:	460b      	mov	r3, r1
 80039f0:	4b96      	ldr	r3, [pc, #600]	; (8003c4c <UART_SetConfig+0x734>)
 80039f2:	fba3 1302 	umull	r1, r3, r3, r2
 80039f6:	095b      	lsrs	r3, r3, #5
 80039f8:	2164      	movs	r1, #100	; 0x64
 80039fa:	fb01 f303 	mul.w	r3, r1, r3
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	011b      	lsls	r3, r3, #4
 8003a02:	3332      	adds	r3, #50	; 0x32
 8003a04:	4a91      	ldr	r2, [pc, #580]	; (8003c4c <UART_SetConfig+0x734>)
 8003a06:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0a:	095b      	lsrs	r3, r3, #5
 8003a0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a10:	441e      	add	r6, r3
 8003a12:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003a16:	4618      	mov	r0, r3
 8003a18:	f04f 0100 	mov.w	r1, #0
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	460b      	mov	r3, r1
 8003a20:	1894      	adds	r4, r2, r2
 8003a22:	61bc      	str	r4, [r7, #24]
 8003a24:	415b      	adcs	r3, r3
 8003a26:	61fb      	str	r3, [r7, #28]
 8003a28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a2c:	1812      	adds	r2, r2, r0
 8003a2e:	eb41 0303 	adc.w	r3, r1, r3
 8003a32:	f04f 0400 	mov.w	r4, #0
 8003a36:	f04f 0500 	mov.w	r5, #0
 8003a3a:	00dd      	lsls	r5, r3, #3
 8003a3c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003a40:	00d4      	lsls	r4, r2, #3
 8003a42:	4622      	mov	r2, r4
 8003a44:	462b      	mov	r3, r5
 8003a46:	1814      	adds	r4, r2, r0
 8003a48:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8003a4c:	414b      	adcs	r3, r1
 8003a4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f04f 0100 	mov.w	r1, #0
 8003a5e:	f04f 0200 	mov.w	r2, #0
 8003a62:	f04f 0300 	mov.w	r3, #0
 8003a66:	008b      	lsls	r3, r1, #2
 8003a68:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003a6c:	0082      	lsls	r2, r0, #2
 8003a6e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8003a72:	f7fc fbc7 	bl	8000204 <__aeabi_uldivmod>
 8003a76:	4602      	mov	r2, r0
 8003a78:	460b      	mov	r3, r1
 8003a7a:	4b74      	ldr	r3, [pc, #464]	; (8003c4c <UART_SetConfig+0x734>)
 8003a7c:	fba3 1302 	umull	r1, r3, r3, r2
 8003a80:	095b      	lsrs	r3, r3, #5
 8003a82:	2164      	movs	r1, #100	; 0x64
 8003a84:	fb01 f303 	mul.w	r3, r1, r3
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	011b      	lsls	r3, r3, #4
 8003a8c:	3332      	adds	r3, #50	; 0x32
 8003a8e:	4a6f      	ldr	r2, [pc, #444]	; (8003c4c <UART_SetConfig+0x734>)
 8003a90:	fba2 2303 	umull	r2, r3, r2, r3
 8003a94:	095b      	lsrs	r3, r3, #5
 8003a96:	f003 020f 	and.w	r2, r3, #15
 8003a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4432      	add	r2, r6
 8003aa2:	609a      	str	r2, [r3, #8]
 8003aa4:	e0c9      	b.n	8003c3a <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003aa6:	f7ff f8b5 	bl	8002c14 <HAL_RCC_GetPCLK1Freq>
 8003aaa:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003aae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003ab2:	461c      	mov	r4, r3
 8003ab4:	f04f 0500 	mov.w	r5, #0
 8003ab8:	4622      	mov	r2, r4
 8003aba:	462b      	mov	r3, r5
 8003abc:	1891      	adds	r1, r2, r2
 8003abe:	6139      	str	r1, [r7, #16]
 8003ac0:	415b      	adcs	r3, r3
 8003ac2:	617b      	str	r3, [r7, #20]
 8003ac4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003ac8:	1912      	adds	r2, r2, r4
 8003aca:	eb45 0303 	adc.w	r3, r5, r3
 8003ace:	f04f 0000 	mov.w	r0, #0
 8003ad2:	f04f 0100 	mov.w	r1, #0
 8003ad6:	00d9      	lsls	r1, r3, #3
 8003ad8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003adc:	00d0      	lsls	r0, r2, #3
 8003ade:	4602      	mov	r2, r0
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	eb12 0804 	adds.w	r8, r2, r4
 8003ae6:	eb43 0905 	adc.w	r9, r3, r5
 8003aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f04f 0100 	mov.w	r1, #0
 8003af6:	f04f 0200 	mov.w	r2, #0
 8003afa:	f04f 0300 	mov.w	r3, #0
 8003afe:	008b      	lsls	r3, r1, #2
 8003b00:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003b04:	0082      	lsls	r2, r0, #2
 8003b06:	4640      	mov	r0, r8
 8003b08:	4649      	mov	r1, r9
 8003b0a:	f7fc fb7b 	bl	8000204 <__aeabi_uldivmod>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	460b      	mov	r3, r1
 8003b12:	4b4e      	ldr	r3, [pc, #312]	; (8003c4c <UART_SetConfig+0x734>)
 8003b14:	fba3 2302 	umull	r2, r3, r3, r2
 8003b18:	095b      	lsrs	r3, r3, #5
 8003b1a:	011e      	lsls	r6, r3, #4
 8003b1c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003b20:	4618      	mov	r0, r3
 8003b22:	f04f 0100 	mov.w	r1, #0
 8003b26:	4602      	mov	r2, r0
 8003b28:	460b      	mov	r3, r1
 8003b2a:	1894      	adds	r4, r2, r2
 8003b2c:	60bc      	str	r4, [r7, #8]
 8003b2e:	415b      	adcs	r3, r3
 8003b30:	60fb      	str	r3, [r7, #12]
 8003b32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b36:	1812      	adds	r2, r2, r0
 8003b38:	eb41 0303 	adc.w	r3, r1, r3
 8003b3c:	f04f 0400 	mov.w	r4, #0
 8003b40:	f04f 0500 	mov.w	r5, #0
 8003b44:	00dd      	lsls	r5, r3, #3
 8003b46:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003b4a:	00d4      	lsls	r4, r2, #3
 8003b4c:	4622      	mov	r2, r4
 8003b4e:	462b      	mov	r3, r5
 8003b50:	1814      	adds	r4, r2, r0
 8003b52:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8003b56:	414b      	adcs	r3, r1
 8003b58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f04f 0100 	mov.w	r1, #0
 8003b68:	f04f 0200 	mov.w	r2, #0
 8003b6c:	f04f 0300 	mov.w	r3, #0
 8003b70:	008b      	lsls	r3, r1, #2
 8003b72:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003b76:	0082      	lsls	r2, r0, #2
 8003b78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003b7c:	f7fc fb42 	bl	8000204 <__aeabi_uldivmod>
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	4b31      	ldr	r3, [pc, #196]	; (8003c4c <UART_SetConfig+0x734>)
 8003b86:	fba3 1302 	umull	r1, r3, r3, r2
 8003b8a:	095b      	lsrs	r3, r3, #5
 8003b8c:	2164      	movs	r1, #100	; 0x64
 8003b8e:	fb01 f303 	mul.w	r3, r1, r3
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	011b      	lsls	r3, r3, #4
 8003b96:	3332      	adds	r3, #50	; 0x32
 8003b98:	4a2c      	ldr	r2, [pc, #176]	; (8003c4c <UART_SetConfig+0x734>)
 8003b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9e:	095b      	lsrs	r3, r3, #5
 8003ba0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ba4:	441e      	add	r6, r3
 8003ba6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003baa:	4618      	mov	r0, r3
 8003bac:	f04f 0100 	mov.w	r1, #0
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	1894      	adds	r4, r2, r2
 8003bb6:	603c      	str	r4, [r7, #0]
 8003bb8:	415b      	adcs	r3, r3
 8003bba:	607b      	str	r3, [r7, #4]
 8003bbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bc0:	1812      	adds	r2, r2, r0
 8003bc2:	eb41 0303 	adc.w	r3, r1, r3
 8003bc6:	f04f 0400 	mov.w	r4, #0
 8003bca:	f04f 0500 	mov.w	r5, #0
 8003bce:	00dd      	lsls	r5, r3, #3
 8003bd0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003bd4:	00d4      	lsls	r4, r2, #3
 8003bd6:	4622      	mov	r2, r4
 8003bd8:	462b      	mov	r3, r5
 8003bda:	1814      	adds	r4, r2, r0
 8003bdc:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8003be0:	414b      	adcs	r3, r1
 8003be2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f04f 0100 	mov.w	r1, #0
 8003bf2:	f04f 0200 	mov.w	r2, #0
 8003bf6:	f04f 0300 	mov.w	r3, #0
 8003bfa:	008b      	lsls	r3, r1, #2
 8003bfc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c00:	0082      	lsls	r2, r0, #2
 8003c02:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8003c06:	f7fc fafd 	bl	8000204 <__aeabi_uldivmod>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	4b0f      	ldr	r3, [pc, #60]	; (8003c4c <UART_SetConfig+0x734>)
 8003c10:	fba3 1302 	umull	r1, r3, r3, r2
 8003c14:	095b      	lsrs	r3, r3, #5
 8003c16:	2164      	movs	r1, #100	; 0x64
 8003c18:	fb01 f303 	mul.w	r3, r1, r3
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	011b      	lsls	r3, r3, #4
 8003c20:	3332      	adds	r3, #50	; 0x32
 8003c22:	4a0a      	ldr	r2, [pc, #40]	; (8003c4c <UART_SetConfig+0x734>)
 8003c24:	fba2 2303 	umull	r2, r3, r2, r3
 8003c28:	095b      	lsrs	r3, r3, #5
 8003c2a:	f003 020f 	and.w	r2, r3, #15
 8003c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4432      	add	r2, r6
 8003c36:	609a      	str	r2, [r3, #8]
}
 8003c38:	e7ff      	b.n	8003c3a <UART_SetConfig+0x722>
 8003c3a:	bf00      	nop
 8003c3c:	37f4      	adds	r7, #244	; 0xf4
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c44:	40011000 	.word	0x40011000
 8003c48:	40011400 	.word	0x40011400
 8003c4c:	51eb851f 	.word	0x51eb851f

08003c50 <__libc_init_array>:
 8003c50:	b570      	push	{r4, r5, r6, lr}
 8003c52:	4d0d      	ldr	r5, [pc, #52]	; (8003c88 <__libc_init_array+0x38>)
 8003c54:	4c0d      	ldr	r4, [pc, #52]	; (8003c8c <__libc_init_array+0x3c>)
 8003c56:	1b64      	subs	r4, r4, r5
 8003c58:	10a4      	asrs	r4, r4, #2
 8003c5a:	2600      	movs	r6, #0
 8003c5c:	42a6      	cmp	r6, r4
 8003c5e:	d109      	bne.n	8003c74 <__libc_init_array+0x24>
 8003c60:	4d0b      	ldr	r5, [pc, #44]	; (8003c90 <__libc_init_array+0x40>)
 8003c62:	4c0c      	ldr	r4, [pc, #48]	; (8003c94 <__libc_init_array+0x44>)
 8003c64:	f000 f820 	bl	8003ca8 <_init>
 8003c68:	1b64      	subs	r4, r4, r5
 8003c6a:	10a4      	asrs	r4, r4, #2
 8003c6c:	2600      	movs	r6, #0
 8003c6e:	42a6      	cmp	r6, r4
 8003c70:	d105      	bne.n	8003c7e <__libc_init_array+0x2e>
 8003c72:	bd70      	pop	{r4, r5, r6, pc}
 8003c74:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c78:	4798      	blx	r3
 8003c7a:	3601      	adds	r6, #1
 8003c7c:	e7ee      	b.n	8003c5c <__libc_init_array+0xc>
 8003c7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c82:	4798      	blx	r3
 8003c84:	3601      	adds	r6, #1
 8003c86:	e7f2      	b.n	8003c6e <__libc_init_array+0x1e>
 8003c88:	08003ce0 	.word	0x08003ce0
 8003c8c:	08003ce0 	.word	0x08003ce0
 8003c90:	08003ce0 	.word	0x08003ce0
 8003c94:	08003ce4 	.word	0x08003ce4

08003c98 <memset>:
 8003c98:	4402      	add	r2, r0
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d100      	bne.n	8003ca2 <memset+0xa>
 8003ca0:	4770      	bx	lr
 8003ca2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ca6:	e7f9      	b.n	8003c9c <memset+0x4>

08003ca8 <_init>:
 8003ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003caa:	bf00      	nop
 8003cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cae:	bc08      	pop	{r3}
 8003cb0:	469e      	mov	lr, r3
 8003cb2:	4770      	bx	lr

08003cb4 <_fini>:
 8003cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cb6:	bf00      	nop
 8003cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cba:	bc08      	pop	{r3}
 8003cbc:	469e      	mov	lr, r3
 8003cbe:	4770      	bx	lr
